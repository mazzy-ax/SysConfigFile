Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics Class: SysConfigFile unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysConfigFile
    PROPERTIES
      Name                #SysConfigFile
      Extends             #
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #checkExists
        #// возвращает true, если параметр присутствует в конфигурационном файле.
        #public final boolean checkExists(str paramName)
        #{
        #    container   cachedValues    = this.getAll(paramName);
        #    boolean     ret             = connull() != cachedValues;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkFileExists
        #// возвращает true, если config-файл существует
        #public final boolean checkFileExists()
        #{
        #    return this.isFileExists(this.filePath());
        #}
      ENDSOURCE
      SOURCE #checkFileValid
        #// возвращает true, если:
        #// * config-файл и xsd-схема доступны и имеют непустое валидное xml-содержание
        #// * config-файл пустой или не доступен (не доступный трактуется как пустой)
        #// * config-файл содержит well formed xml, а xsd-схема или пуста, или не доступна
        #// * config-файл и xsd-схема содержат well formed xml, но сама схема сама невалидна, см. checkSchemaValid()
        #// возвращает false, в остальных случаях.
        #public final boolean checkFileValid()
        #{
        #    XmlReader   xmlReader;
        #;
        #    if( xmlDocumentValidated == false )
        #    {
        #        xmlDocumentValidationError = null;
        #        xmlDocumentValidated = true;
        #
        #        if( this.xmlDocument() == null  )
        #            return true;
        #
        #        if( !this.xmlSchema() )
        #            return true;
        #
        #        if( !this.checkSchemaValid() )
        #            return true;
        #
        #        // к сожалению, повторное чтение xml и схемы из строк:
        #        // xmlDocument и xmlSchema не используются в валидации аксаптовскими классами
        #        xmlReader = xmlReader::newXml(this.file());
        #        if( xmlReader )
        #            xmlDocumentValidationError = xmlReader.validate(this.schema());
        #    }
        #
        #    return (xmlDocumentValidationError == null);
        #}
      ENDSOURCE
      SOURCE #checkNotEmpty
        #// возвращает true, если параметр присутствует в конфигурационном файле и его значение не пусто.
        #public final boolean checkNotEmpty(str paramName)
        #{
        #    str value = this.get(paramName);
        #
        #    return (value != '');
        #}
      ENDSOURCE
      SOURCE #checkSchemaValid
        #// возвращает true, если:
        #// * xsd-схема доступна, имеет well formed xml и не содержит ошибок компиляции см. xmlns:xs="http://www.w3.org/2001/XMLSchema", https://www.w3.org/XML/Schema
        #// * xsd-схема недоступна или пуста (не доступная трактуется как пустая)
        #// возвращает false, в остальных случаях.
        #public final boolean checkSchemaValid()
        #{
        #    if( this.xmlSchema() == null )
        #        return true;
        #
        #    if( this.xmlSchema().validationError() )
        #        return false;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #chooseExistOfFirstFile
        #// принимает контейнер, содержащий полные имена файлов
        #// перебирает имена и проверяет существует ли файл
        #// возвращает первый существующий файл
        #// если не существует ни одного файла, то возвращает первое имя
        #protected Filename chooseExistOfFirstFile(container paths)
        #{
        #    Filename path;
        #    int      len = conlen(paths);
        #    int      i;
        #
        #    for( i=1; i<=len; i++ )
        #    {
        #        path = conpeek(paths, i);
        #        if( this.isFileExists(path) )
        #        {
        #            return path;
        #        }
        #    }
        #
        #    path = conpeek(paths, 1);
        #    return path;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysConfigFile
        #// (с) 2019 mazzy, v2.0, MIT License
        #//
        #// класс всегда выполняется на сервере!! см в AOT-параметры класса.
        #// класс и методы объявлены как final только ради производительности.
        #// класс использует аксаптовские xml-классы для работы с xml и xsd.
        #// класс реализует интерфейс SysPackable и содержит статический метод create по packed-контейнеру. см. также метод testPackable в классе SysConfigFile
        #//
        #// класс сознательно НЕ работает xml namespaces и неквалифицрованными названиями тегов и атрибутов.
        #// если потребность в namespase возникнет, то возможно потребуется рефакторить класс.
        #//
        #// класс создает неизменяемые (immutable) объекты - все значимые параметры определяются при создании объекта, хранятся в переменных объекта
        #// и не изменяются пока объект "живет".  см. https://en.wikipedia.org/wiki/Immutable_object
        #// некоторые внутренние переменные класса при необходимости вычисляют свое значение (lazyValue) и тоже не меняются после вычисления.
        #// в частности, класс читает содержимое config-файла и xsd-схемы один раз при первом обращении к файлу и схеме,
        #// а в дальнейшем переиспользует уже прочитанные файлы.
        #// соответственно значения параметров читаются из config-файла только один раз и хранятся в глобальном кэше.
        #// класс возвращает значение из кэша, если оно там есть. В противном случае читает значение из xml-файла.
        #//
        #// класс может выполнить валидацию config-файла по xsd-схеме. https://www.w3.org/XML/Schema
        #// чтобы выполнить валидацию, программист должен явно вызвать хотя бы один из методов: ensureFileValid, assertFileValid или checkFileValid.
        #// если методы не вызваны, то xml-классы выполняют только проверку "well formed xml" при чтении config-файла.
        #// xsd-схема может хранится централизовано в ресурсах AOT или в xsd-файле рядом с config-файлом,
        #// а может задаваться как параметр при создании класса.
        #//
        #// аксаптовские xml-классы не выполняет валидацию по DTD (выполняется только проверка синтаксиса DTD как подмножества синтаксиса xml)
        #// с некоторого времени Microsoft считает работу с DTD опасной (https://msdn.microsoft.com/en-us/magazine/ee335713.aspx)
        #// во-первых из-за "xml bomb" (гуглите). во-вторых, потому что способ проверки задает создатель внутри этого xml-файла.
        #// в далекие 2000е в этом не видели проблему, но уже в 2010е стали считать, что доверять создателю файла слишком наивно и опасно.
        #// технически, в аксаптовских xml-классах есть метод prohibitDtd. по умолчанию он возвращает true.
        #// у автора не получилось включить процессинг DTD в аксапте даже передав false в метод prohibitDtd.
        #// дайте знать, если у вас получится - https://github.com/mazzy-ax/SysConfigFile/issues
        #//
        #// класс использует System.String.Trim() поскольку аксаптовский global::strLRTrim() обрезает только пробелы,
        #// а нужно обрезать и пробелы, и табуляцию, и лишние переводы строк
        #//
        #// класс реализует паттерн check, ensure, assert:
        #// * check-методы возвращают boolean значение и не бросают исключений.
        #//   check-методы позволяют программисту проверить некое условие в своем коде. например, if(!config.checkFileValid()){...}
        #// * ensure-методы возвращают this объекта и бросают исключения при невыполнении некоего условия.
        #//   ensure-методы позволяют программисту записать цепочку проверок. например, config.checkFileValid().checkNotEmpty("param").get()
        #// * assert-методы являются статическими, ничего не возвращают и бросают исключения при невыполнении некоего условия
        #//
        #public final class SysConfigFile implements SysPackable
        #{
        #    #File
        #    #define.defaultConfigName('Axapta')
        #
        #    // обязательный непустой key-параметр
        #    str             configName;         // имя конфига. используется как составная часть:
        #                                        // в имени ресурса и в имени файла, в которых хранится конфиг
        #                                        // а также как owner в globalCache()
        #
        #    // опциональные параметры - вычисляются, если не заданы в конструкторе
        #    str             directory;          // каталог, в котором класс ищет config-файл. вместо пустой строки использует defaultDirectory() = %Appl%\Config
        #    str             file;               // исходный текст конфига
        #    boolean         fileLoaded;
        #    str             schema;             // исходный текст xsd-схемы
        #    boolean         schemaLoaded;
        #
        #    // lazy - вычисляются один раз по мере необходимости. после вычисления не вычисляются заново и не изменяют свое значение
        #    // поэтому не используйте напрямую, а только через соответствующие методы класса
        #    str             owner;              // owner найденных в конфиге параметров, см. globalCache()
        #    SysElementName  schemaResourceName; // имя аксаптовского ресурса, см. schemaResourceName()
        #    Filename        filePath;           // полное имя config-файла с путем и расширением
        #    Filename        schemaPath;         // полное имя xsd-файла с путем и расширением
        #
        #    XmlDocument     xmlDocument;
        #    XmlSchema       xmlSchema;
        #
        #    boolean                     xmlDocumentValidated;
        #    XmlSchemaValidationError    xmlDocumentValidationError;
        #
        #    // прочие
        #    str             lastUsedParamName;
        #
        #    #define.CurrentVersion(1)
        #    #define.version1(1)
        #    #localmacro.CurrentList
        #        configName,
        #        directory,
        #        file,
        #        fileLoaded,
        #        schema,
        #        schemaLoaded
        #    #endmacro
        #
        #}
      ENDSOURCE
      SOURCE #clearGlobalCache
        #// очищает из кэша значения всех прочитанных параметров данного конфига
        #// создайте новый объект SysConfigFile для того, чтобы заново прочитать конфиг или схему
        #public final SysConfigFile clearGlobalCache()
        #{
        #    this.globalCache().clear(this.globalCacheOwner());
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #defaultDirectory
        #// возвращает каталог, в котором SysConfigFile будет искать config-файлы
        #// используется если при создании объекта каталог не был указан
        #// внимание! класс серверный, поэтому пути вычисляются на сервере
        #// по умолчанию возвращает %Appl%\Config\
        #//
        #// строка обязана иметь завершающий \
        #private final str defaultDirectory()
        #{
        #    str ret = xInfo::directory(DirectoryType::Appl)+'Config\\';
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #directory
        #// возвращает серверный каталог, в котором SysConfigFile будет искать config-файлы
        #// внимание! класс серверный, поэтому пути вычисляются на сервере
        #public final str directory()
        #{
        #    if( directory == '' )
        #        return this.defaultDirectory();
        #
        #    return directory;
        #}
      ENDSOURCE
      SOURCE #ensureExists
        #// возвращает ссылку на себя, если параметр присутствует в конфигурационном файле. Иначе бросает исключение.
        #//
        #// ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
        #public final SysConfigFile ensureExists(str paramName)
        #{
        #    if( this.checkExists(paramName) )
        #        return this;
        #
        #    throw error(strfmt("Параметр %1 отсутствует в файле %2. Обратитесь к разработчикам.\r\n%3", paramName, this.filePath(), this.file()));
        #}
      ENDSOURCE
      SOURCE #ensureFileExists
        #// возвращает ссылку на себя, config-файл существует. Иначе бросает исключение.
        #//
        #// ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
        #public final SysConfigFile ensureFileExists()
        #{
        #    if( this.checkFileExists() )
        #        return this;
        #
        #    throw error(strfmt("Файл %1 не найден или нет доступа. Обратитесь к разработчикам", this.filePath()));
        #}
      ENDSOURCE
      SOURCE #ensureFileValid
        #// возвращает ссылку на себя, если проверка на валидность config-файла прошла успешно. Иначе бросает исключение.
        #//
        #// ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
        #public final SysConfigFile ensureFileValid()
        #{
        #    if( this.checkFileValid() )
        #        return this;
        #
        #    if( xmlDocumentValidationError == null )
        #        return this;
        #
        #    throw error(strfmt("Line:%1, Pos:%2: %3\r\n%4\r\n%5",
        #                xmlDocumentValidationError.lineNumber(),
        #                xmlDocumentValidationError.linePosition(),
        #                xmlDocumentValidationError.message(),
        #                this.filePath(),
        #                this.file()));
        #}
      ENDSOURCE
      SOURCE #ensureNotEmpty
        #// возвращает ссылку на себя, если параметр присутствует в конфигурационном файле и его значение не пусто. Иначе бросает исключение.
        #//
        #// ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
        #public final SysConfigFile ensureNotEmpty(str paramName)
        #{
        #    if( this.checkNotEmpty(paramName) )
        #        return this;
        #
        #    throw error(strfmt("Параметр %1 пустой или отсутствует в %2. Обратитесь к разработчикам.\r\n%3", paramName, this.filePath(), this.file()));
        #}
      ENDSOURCE
      SOURCE #ensureSchemaValid
        #// возвращает ссылку на себя, если если проверка на валидность xsd-схемы прошла успешно. Иначе бросает исключение.
        #//
        #// ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
        #public final SysConfigFile ensureSchemaValid()
        #{
        #    XmlSchemaValidationError    schemaValidationError;
        #;
        #    if( this.checkSchemaValid() )
        #        return this;
        #
        #    if( this.xmlSchema() )
        #        schemaValidationError = this.xmlSchema().validationError();
        #
        #    if( schemaValidationError == null )
        #        return this;
        #
        #    throw error(strfmt("Line:%1, Pos:%2: %3\r\n%4\r\n%5",
        #                schemaValidationError.lineNumber(),
        #                schemaValidationError.linePosition(),
        #                schemaValidationError.message(),
        #                this.schemaPath(),
        #                this.schema()));
        #}
      ENDSOURCE
      SOURCE #file
        #// возвращает исходный текст config-файла
        #// возвращает пустую строку, если файл не удалось загрузить
        #public final str file()
        #{
        #    if( file )
        #        return file;
        #
        #    if( fileLoaded )
        #        return file;
        #
        #    fileLoaded = true;
        #    file = this.load(this.filePath());
        #
        #    return file;
        #}
      ENDSOURCE
      SOURCE #filePath
        #// возвращает полный путь к существующему config-файлу с расширениями .config, .config.xml, .xml и без расширения
        #// если ни одного файла не существует, то возвращает путь с расширением .config
        #//
        #// можно модифицировать код, чтобы метод искал конфигурационный файл в разных директориях
        #// и возвращал первый существующий config-файл
        #//
        #// внимание! класс серверный, поэтому пути вычисляются на сервере
        #public FileName filePath()
        #{
        #    Filename name;
        #
        #    if( filePath == '' )
        #    {
        #        name = strfmt('%1%2', this.directory(), this.name());
        #
        #        filePath = this.chooseExistOfFirstFile([
        #                name+'.config',
        #                name+'.config.xml',
        #                name+'.xml',
        #                name
        #        ]);
        #    }
        #
        #    return filePath;
        #}
      ENDSOURCE
      SOURCE #get
        #// возвращает первое найденное строковое значение параметра
        #// возвращает пустую строку, если параметр отсутствует или класс не смог прочитать xml-файл
        #// paramName - может быть выражением xPath
        #// Если paramName пустой, то используется предыдущее значение paramName
        #public final str get(str paramName = '', str defaultValue = '')
        #{
        #    container values = this.getAll(paramName);
        #;
        #    if( values != connull() )
        #        return conpeek(values, 1);
        #
        #    return defaultValue;
        #}
      ENDSOURCE
      SOURCE #getAll
        #// возвращает контейнер найденных строковых значений параметра
        #// возвращает connull, если параметр отсутствует или класс не смог прочитать xml-файл
        #// paramName - может быть выражением xPath
        #// Если paramName пустой, то используется предыдущее значение paramName
        #//
        #// возвращает контейнер а не составной объект, чтобы уменьшить накладные расходы на передачу объекта между клиентом и сервером
        #public final container getAll(str _paramName = '')
        #{
        #    str             paramName   = this.parmLastUsedParamName(_paramName);
        #    container       ret;
        #    XmlNodeList     nodeList;
        #    XmlNode         node;
        #    str             text;
        #;
        #    if( paramName == '' )
        #        return ret;
        #
        #    if( this.file() == '' )
        #        return ret;
        #
        #    // проверяем кэш, если текст был загружен из файла (предполагаем, что в файле постоянное содержимое)
        #    // иначе текст был установлен из конструктора и в нем может быть что угодно, поэтому не кэшируем
        #    if( fileLoaded )
        #        ret = this.globalCache().get(this.globalCacheOwner(), paramName, connull());
        #
        #    if( ret )
        #        return ret;
        #
        #    if( this.xmlRoot() )
        #        nodeList = this.xmlRoot().selectNodes(paramName);
        #
        #    if( nodeList )
        #    {
        #        node = nodeList.nextNode();
        #        while( node )
        #        {
        #            ret += this.trim(node.text());
        #            node = nodeList.nextNode();
        #        }
        #    }
        #
        #    // если текст был загружен из файла, то записываем в кэш
        #    if( fileLoaded )
        #        this.globalCache().set(this.globalCacheOwner(), paramName, ret);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getBoolean
        #// возвращает true, если параметр содержится в config-файле и имеет true-значение (см. комментарий внутри метода toBoolean)
        #// возвращает defaultValue, если параметр не содержится в config-файле или имеет false-значение (см. комментарий внутри метода toBoolean)
        #public final boolean getBoolean(str paramName = '', boolean defaultValue = false)
        #{
        #    str value;
        #
        #    if( !this.checkExists(paramName) )
        #        return defaultValue;
        #
        #    value = this.get(paramName);
        #
        #    return SysConfigFile::toBoolean(value, defaultValue);
        #}
      ENDSOURCE
      SOURCE #getBy
        #// В Аксапте часто задаются настройки с приоритетом.
        #// например, если нужно получить профиль разноски, то Аксапта:
        #// сначала смотрит в профили разноски по товарам,
        #// затем, если не найдено, то в профили разноски по группам,
        #// затем, если не найдено, то в профили разноски по всем.
        #// причем в Аксапте последовательность поиска не зависит от порядка элементов в таблице профилей.
        #//
        #// В xml-файлах, напротив, порядок элементов важен. Операторы xPath сохраняют порядок элементов из xml-файла.
        #// Это значит, каким бы ни было выражение xPath, первым мы получим элемент, который в xml-файле расположен ближе к началу файла.
        #// Конечно, вручную можно следить за порядком элементов в xml.
        #// Но при генерации xml скриптами порядок элементов соблюдать уже затруднительно.
        #//
        #// Данный метод принимает несколько xPath-выражений и последовательно делает запрос для каждого выражения.
        #// Данный метод возвращает первое найденное значение. Если ни одно выражение не нашло значений, то метод возвращает defaultValue
        #//
        #// Пример:
        #// config.getBy(['profile[@group="mazzy"]', 'profile[not(@group)]'])
        #//
        #// См. также методы testGetBy в классе SysConfigFileTest
        #//
        #// Важно! paramNames - это контейнер строк.
        #// Если внутри контейнера есть элемент-не-строка и метод добрался до проверки этого элемента, то метод бросит исключение.
        #// Если внутри есть пустая строка, то она будет проинтерпретирована как "получить из кэша значение предыдущего выражения"
        #// На практике полезной может быть только первая пустая строка. Но и в середине они допустимы, если контейнер создается каким-либо алгоритмом.
        #public final str getBy(container paramNames = [''], str defaultValue = '')
        #{
        #    int         len = conlen(paramNames);
        #    int         i;
        #    str         paramName;
        #
        #    for(i=1; i<=len; i++)
        #    {
        #        paramName = conpeek(paramNames, i);     // здесь возможно исключение, если контейнер содержит не-строку
        #        if( this.checkExists(paramName) )       // результат каждого запроса кэшируется
        #            return this.get(paramName);
        #    }
        #
        #    return defaultValue;
        #}
      ENDSOURCE
      SOURCE #globalCache
        #// однажды вычисленные значения из config-файла храним в appl.GlobalCache(). можно в infolog.GlobalCache() или classFactory.GlobalCache()
        #private final SysGlobalCache globalCache()
        #{
        #    if (!appl)                              // сюда попадаем, если кто-то запросил значения из appl.startup() при старте AOS,
        #        return SysGlobalCache::construct(); // когда еще не инициализированы глобальные переменные
        #
        #    return appl.globalCache();
        #}
      ENDSOURCE
      SOURCE #globalCacheOwner
        #// значение owner для globalCache
        #private final str globalCacheOwner()
        #{
        #    // здесь хитрый момент:
        #    // в owner входит не полное имя файла с путем и расширением, а только configName (имя)
        #    // в результате ускоряется метод get, если значение уже есть в кэше (поскольку не нужно вычислять каталог)
        #    if (!owner)
        #        owner = strfmt("%1:%2", funcname(), this.name());
        #
        #    return owner;
        #}
      ENDSOURCE
      SOURCE #isFileExists
        #// возвращает true, файл существует
        #protected final boolean isFileExists(Filename path)
        #{
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    if( System.IO.File::Exists(path) )
        #        return true;
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #load
        #// загрузить текст из файла, который размещен по указанному пути
        #// возвращает загруженный из файла текст
        #// возвращает пустую строку, если файл не удалось загрузить
        #private final str load(str path)
        #{
        #    TextBuffer  textBuffer;
        #    str         fileText;
        #
        #    if( !this.isFileExists(path) )
        #        return fileText;
        #
        #    new FileIOPermission(path, 'r').assert();
        #
        #    textBuffer = new TextBuffer();
        #
        #    if( textBuffer.fromFile(path) )
        #        fileText = textBuffer.getText();
        #
        #    return fileText;
        #}
      ENDSOURCE
      SOURCE #name
        #public final str name()
        #{
        #    return configName;
        #}
      ENDSOURCE
      SOURCE #new
        #public final void new(str _configName = #defaultConfigName, str _directory = '', str _schema = '', str _xml = '')
        #{
        #    if( _configName == '' )
        #        configName = #defaultConfigName;
        #    else
        #        configName = _configName;
        #
        #    if( _directory && substr(_directory, strlen(_directory), 1) != '\\' )
        #        _directory = _directory + '\\';
        #
        #    directory = _directory;
        #    schema = _schema;
        #    file = _xml;
        #}
      ENDSOURCE
      SOURCE #pack
        #public final container pack()
        #{
        #    return [#CurrentVersion,#CurrentList];
        #}
      ENDSOURCE
      SOURCE #parmLastUsedParamName
        #// возвращает _paramName, если _paramName не пустой
        #// возвращает последнее использованное наименование, если _paramName пустой
        #// запоминает наименование в lastUsedParamName
        #public final str parmLastUsedParamName(str _paramName = lastUsedParamName)
        #{
        #    if( !prmisdefault(_paramName) )
        #    {
        #        _paramName = this.trim(_paramName);
        #
        #        if( _paramName )
        #            lastUsedParamName = _paramName;
        #    }
        #
        #    return lastUsedParamName;
        #}
      ENDSOURCE
      SOURCE #schema
        #// метод в первую очередь пытается загрузить текст схемы из AOT-ресурса с именем из schemaResourceName()
        #// если AOT-ресурса с таким именем нет, то метод пытается загрузить схему из xsd-файла,
        #// который размещен в том же каталоге, что config-файл
        #//
        #// возвращает текст xsd-схемы
        #// возвращает пустую строку, если схему не удалось загрузить
        #public final str schema()
        #{
        #    ResourceNode    resourceNode;
        #    container       resourceData;
        #;
        #    if( schema )
        #        return schema;
        #
        #    if( schemaLoaded )
        #        return schema;
        #
        #    schemaLoaded = true;
        #
        #    resourceNode = SysResource::getResourceNode(this.schemaResourceName());
        #    if( resourceNode )
        #    {
        #        resourceData = SysResource::getResourceNodeData(resourceNode);
        #        schema = conpeek(resourceData, 1);
        #        return schema;
        #    }
        #
        #    schema = this.load(this.schemaPath());
        #    return schema;
        #}
      ENDSOURCE
      SOURCE #schemaPath
        #// возвращает полный путь к файлу с xsd-схемой на сервере
        #public final FileName schemaPath()
        #{
        #    if( schemaPath == '' )
        #        schemaPath = strfmt('%1%2.xsd', this.directory(), this.name());
        #
        #    return schemaPath;
        #}
      ENDSOURCE
      SOURCE #schemaResourceName
        #// возвращает название ресурса (AOT\Resources), который содержит текст xsd-схемы
        #public final str schemaResourceName()
        #{
        #    if( schemaResourceName == '' )
        #        schemaResourceName = TreeNode::generateObjectName('Config_'+this.name());
        #
        #    return schemaResourceName;
        #}
      ENDSOURCE
      SOURCE #toString
        #// преобразует объект в строку.
        #// отладчик показывает эту строку как value объекта.
        #public final str toString()
        #{
        #    // читаем приватные переменные. ни в коем случае не обращаемся к методам ленивого доступа
        #    str ret = strfmt("{Name:%1, Dir:%2, File:%3, Schema:%4}", configName, directory, file, schema);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #trim
        #// обрезает не только пробелы, но и табуляцию с переводами строк и прочими white spaces юникода
        #private final str trim(str s)
        #{
        #    System.String ss;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #    ss = System.String::Copy(s);
        #    s = ss.Trim();
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #unpack
        #public final boolean unpack(container packedClass)
        #{
        #    int version = runbase::getVersion(packedClass);
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList] = packedClass;
        #            return true;
        #        default :
        #            return false;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #xmlDocument
        #// возвращает XML-документ
        #// возвращает null, если документа не доступен или при чтении файла выявлены ошибки синтксического разбора xml-файла
        #//
        #// внимание! метод добавляет ошибки разбора xml-файла в инфолог, но исключение не бросает
        #// предполагается, что программист получит значения при помощи get() или ensure().get()
        #// и тем самым явно определит во внешнем коде обязательность того или иного параметра
        #//
        #// теоретически, конфигурационный файл может отсутствовать, может быть недоступным или содержать ошибки,
        #// программист может задать разумное поведение и для этих случаев, не вводя try/catch
        #private final XmlDocument xmlDocument()
        #{
        #    XmlParseError parseError;
        #;
        #    if( xmlDocument != null )
        #        return xmlDocument;
        #
        #    if( this.file() == '' )
        #        return null;
        #
        #    xmlDocument = XmlDocument::newXml(this.file());
        #    if( !xmlDocument )
        #        return null;
        #
        #    parseError = xmlDocument.parseError();
        #    if( parseError && parseError.errorCode() != 0 )
        #    {
        #        error(strfmt("@SYS97048", parseError.toString()));
        #        return null;
        #    }
        #
        #    return xmlDocument;
        #}
      ENDSOURCE
      SOURCE #xmlRoot
        #private final XmlElement xmlRoot()
        #{
        #    if( this.xmlDocument() == null )
        #        return null;
        #
        #    return this.xmlDocument().root();
        #}
      ENDSOURCE
      SOURCE #xmlSchema
        #// возвращает объект с xsd-схемой
        #// возвращает null, если схема не доступна
        #// ошибки компиляции не приводят к ошибкам на данном этапе
        #// чтобы провалидировать саму схему, программист должен явно вызвать checkSchemaValid, ensureSchemaValid, assertSchemaValid
        #// также схема будет неявно провалидирована, если программист вызовет валидацию файла checkFileValid, ensureFileValid, assertFileValid
        #private final XmlSchema xmlSchema()
        #{
        #    if( xmlSchema )
        #        return xmlSchema;
        #
        #    if( this.schema() == '' )
        #        return null;
        #
        #    xmlSchema = XMLSchema::newXml(this.schema());
        #
        #    if( xmlSchema )
        #        xmlSchema.compile();    // схема может содержать ошибки компиляции. проверяется в методе валидации
        #
        #    return xmlSchema;
        #}
      ENDSOURCE
      SOURCE #allValues
        #// возвращает контейнер найденных строковых значений параметра
        #// или connull, если параметр отсутствует или класс не смог прочитать xml-файл
        #// paramName - может быть выражением xPath
        #// Если paramName пустой, то используется предыдущее значение paramName
        #//
        #// используйте этот метод только для чтения одного параметра из config-файла
        #// как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static container allValues(str paramName, str configName = #defaultConfigName, str directory = '')
        #{
        #    container ret = SysConfigFile::construct(configName, directory).getAll(paramName);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #assertExists
        #// используйте этот метод только для проверки одного параметра из config-файла
        #// как только нужно прочитать несколько параметров или проверить несколько условий,
        #// создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static SysConfigFile assertExists(str paramName, str configName = #defaultConfigName, str directory = '')
        #{
        #    return SysConfigFile::construct(configName, directory).ensureExists(paramName);
        #}
      ENDSOURCE
      SOURCE #assertFileExists
        #// используйте этот метод только для проверки одного условия
        #// как только нужно прочитать несколько параметров или проверить несколько условий,
        #// создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static SysConfigFile assertFileExists(str configName = #defaultConfigName, str directory = '')
        #{
        #    return SysConfigFile::construct(configName, directory).ensureFileExists();
        #}
      ENDSOURCE
      SOURCE #assertFileValid
        #// используйте этот метод только для проверки одного условия
        #// как только нужно прочитать несколько параметров или проверить несколько условий,
        #// создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static SysConfigFile assertFileValid(str configName = #defaultConfigName, str directory = '')
        #{
        #    return SysConfigFile::construct(configName, directory).ensureFileValid();
        #}
      ENDSOURCE
      SOURCE #assertNotEmpty
        #// используйте этот метод только для проверки одного параметра из config-файла
        #// как только нужно прочитать несколько параметров или проверить несколько условий,
        #// создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static SysConfigFile assertNotEmpty(str paramName, str configName = #defaultConfigName, str directory = '')
        #{
        #    return SysConfigFile::construct(configName, directory).ensureNotEmpty(paramName);
        #}
      ENDSOURCE
      SOURCE #assertSchemaValid
        #// используйте этот метод только для проверки одного условия
        #// как только нужно прочитать несколько параметров или проверить несколько условий,
        #// создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static SysConfigFile assertSchemaValid(str configName = #defaultConfigName, str directory = '')
        #{
        #    return SysConfigFile::construct(configName, directory).ensureSchemaValid();
        #}
      ENDSOURCE
      SOURCE #construct
        #server public static SysConfigFile construct(str configName = #defaultConfigName, str directory = '', str schema = '', str xml = '')
        #{
        #    SysConfigFile ret = new SysConfigFile(configName, directory, schema, xml);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #create
        #// Создает объект из контейнера, который в свою очередь был создан методом SysConfigFile.pack()
        #// возвращает созданный объект, если распаковка из контейнера прошла успешно
        #// возвращает null в противном случае
        #server public static SysConfigFile create(container con)
        #{
        #    SysConfigFile sysConfigFile = new SysConfigFile();
        #;
        #    if( sysConfigFile.unpack(con) == false )
        #        return null;
        #
        #    return sysConfigFile;
        #}
      ENDSOURCE
      SOURCE #exists
        #// используйте этот метод только для проверки одного параметра из config-файла
        #// как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static boolean exists(str paramName, str configName = #defaultConfigName, str directory = '')
        #{
        #    boolean ret = SysConfigFile::construct(configName, directory).checkExists(paramName);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toBoolean
        #// возвращает false, если параметр не содержится в config-файле (или имеет false-значение. см. комментарий внутри)
        #// возвращает true, если параметр содержится в config-файле и имеет true-значение (см. комментарий внутри)
        #// возвращает defaultValue, если параметр содержится в config-файле и содержит прочий текст
        #public static boolean toBoolean(str value, boolean defaultValue = false)
        #{
        #    // спорный момент: нужно ли трактовать пустое значение в существующем xml-элементе как true или как false?
        #    // в мире XML элементы с пустым значением принято оформлять одним элементом с замыкающей косой чертой: <emptyValue />
        #    // такие элементы трактуются как разрешение чего-нибудь, включение чего-нибудь или как наличие чего-нибудь.
        #    // но в мире XML нет способа отличить разные формы записи элементов: <emptyValue /> и <emptyValue></emptyValue> - эквивалентны
        #    // поэтому можно либо оба варианта трактовать как true, либо оба варианта как false.
        #    // Предлагается трактовать как true. см. также "C.2. Empty Elements" https://www.w3.org/TR/xhtml1/#guidelines
        #    //
        #    if( value == '' )   // Закомментируйте эти две строки
        #        return true;    // если хотите трактовать пустое значение как false
        #
        #    if( value == '1' )
        #        return true;
        #
        #    value = strupr(value);
        #    if( value == 'TRUE' || value == 'ON' )
        #        return true;
        #
        #    // спорный момент: можно ли трактовать остальные значения как false? или обязательно требовать определенного текста?
        #    //if( value == '0' || value == 'FALSE' || value == 'OFF' )
        #    //    return false;
        #
        #    return defaultValue;
        #}
      ENDSOURCE
      SOURCE #value
        #// возвращает первое найденное строковое значение параметра
        #// бросает исключение, если параметр отсутствует в config-файле или класс не смог прочитать xml-файл
        #// paramName - может быть выражением xPath. Если paramName пустой, то используется предыдущее значение paramName
        #//
        #// используйте этот метод только чтения одного параметра из config-файла
        #// как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static str value(str paramName, str configName = #defaultConfigName, str directory = '')
        #{
        #    str ret = SysConfigFile::construct(configName, directory).ensureExists(paramName).get();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #valueBoolean
        #// возвращает true или false. см. комментарий в методе getBoolean
        #//
        #// используйте этот метод только чтения одного параметра из config-файла
        #// как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static boolean valueBoolean(str paramName, str configName = #defaultConfigName, str directory = '')
        #{
        #    boolean ret = SysConfigFile::construct(configName, directory).getBoolean(paramName);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #valueBy
        #// Данный метод принимает несколько xPath-выражений и последовательно делает запрос для каждого выражения.
        #// Данный метод возвращает первое найденное значение. Если ни одно выражение не нашло значений, то метод возвращает defaultValue
        #// см. комментарий к методу getBy()
        #//
        #// используйте этот метод только чтения одного параметра из config-файла
        #// как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
        #public static str valueBy(container paramNames, str defaultValue = '', str configName = #defaultConfigName, str directory = '')
        #{
        #    str ret = SysConfigFile::construct(configName, directory).getBy(paramNames, defaultValue);
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #valueOrDefault
        #// возвращает первое найденное строковое значение параметра
        #// возвращает defaultValue, если параметр отсутствует в config-файле или класс не смог прочитать xml-файл
        #// paramName - может быть выражением xPath. Если paramName пустой, то используется предыдущее значение paramName
        #//
        #// используйте этот метод только чтения одного параметра из config-файла
        #public static str valueOrDefault(str paramName, str defaultValue = '', str configName = #defaultConfigName, str directory = '')
        #{
        #    str ret = SysConfigFile::construct(configName, directory).get(paramName, defaultValue);
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics Class: SysConfigFileTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysConfigFileTest
    PROPERTIES
      Name                #SysConfigFileTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysConfigFile
        #// (с) 2019, 2021 mazzy, v2.1, MIT License
        #//
        #// класс всегда выполняется на сервере!! см в AOT-параметры класса
        #public class SysConfigFileTest extends SysTestCase
        #{
        #    Set resourceNameSet;
        #    str tempPath;
        #}
      ENDSOURCE
      SOURCE #setUp
        #public void setUp()
        #{
        #    str aosInstance = conpeek(SysEmailSMTPPassword::currentAOSInstance(), 2);
        #
        #    super();
        #
        #    resourceNameSet = new Set(Types::String);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    tempPath = System.IO.Path::GetTempPath();
        #    tempPath = strfmt('%1ax4-%2-Config%3\\', tempPath, aosInstance, sessionid());
        #
        #    System.IO.Directory::CreateDirectory(tempPath);
        #}
      ENDSOURCE
      SOURCE #tearDown
        #public void tearDown()
        #{
        #    SetEnumerator   se  = resourceNameSet.getEnumerator();
        #    ResourceNode    resourceNode;
        #    SysElementName  resourceName;
        #
        #    // удалить созданные во время тестов ресурсы
        #    while( se.moveNext() )
        #    {
        #        resourceName = se.current();
        #        resourceNode = SysResource::getResourceNode(resourceName);
        #        if( resourceNode && strStartsWith(resourceNode.filename(), '.') )   // очищаем только те, что начинаются с точки
        #            resourceNode.AOTdelete();                                       // остальные возможно не тестовые, а рабочие
        #    }
        #
        #    // удалить временный каталог вместе со всеми config- и xsd-файлами
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #    System.IO.Directory::Delete(tempPath, true);
        #
        #    super();
        #}
        #
      ENDSOURCE
      SOURCE #testAllValues
        #void testAllValues()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName, tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value1</test>
        #          <test>Value2</test>
        #          <test>Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals(['Value1','Value2','Value3','Value4'], SysConfigFile::allValues('test',configName,tempPath));
        #}
      ENDSOURCE
      SOURCE #testAllValues_Blank
        #void testAllValues_Blank()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), '');
        #
        #    this.assertEquals(connull(), SysConfigFile::allValues('test',configName,tempPath));
        #}
      ENDSOURCE
      SOURCE #testAllValues_Empty
        #void testAllValues_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></test>
        #          <test></test>
        #          <test></test>
        #          <test></test>
        #        </root>
        #    ');
        #
        #    this.assertEquals(['','','',''], SysConfigFile::allValues('test',configName,tempPath));
        #}
      ENDSOURCE
      SOURCE #testAllValues_NotExists
        #void testAllValues_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #        </root>
        #    ');
        #
        #    this.assertEquals(connull(), SysConfigFile::allValues('test',configName,tempPath));
        #}
      ENDSOURCE
      SOURCE #testAllValues_Null
        #void testAllValues_Null()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    // config-файл отсутствует
        #
        #    this.assertEquals(connull(), SysConfigFile::allValues('test',configName,tempPath));
        #}
      ENDSOURCE
      SOURCE #testCheckExists_Blank
        #void testCheckExists_Blank()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), '');
        #
        #    this.assertFalse(config.checkExists('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckExists_Empty
        #void testCheckExists_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></test>
        #        </root>
        #    ');
        #
        #    this.assertTrue(config.checkExists('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckExists_NotEmpty
        #void testCheckExists_NotEmpty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value</test>
        #        </root>
        #    ');
        #
        #    this.assertTrue(config.checkExists('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckExists_NotExists
        #void testCheckExists_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    config.clearGlobalCache(); // очистим значения в глобальном кэше
        #
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #        </root>
        #    ');
        #
        #    this.assertFalse(config.checkExists('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckExists_Null
        #void testCheckExists_Null()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    // config-файл отсутствует
        #
        #    this.assertFalse(config.checkExists('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckFileExists_Exists
        #void testCheckFileExists_Exists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value</test>
        #        </root>
        #    ');
        #
        #    this.assertTrue(config.checkFileExists());
        #}
      ENDSOURCE
      SOURCE #testCheckFileExists_NotExists
        #void testCheckFileExists_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.assertFalse(config.checkFileExists());
        #}
      ENDSOURCE
      SOURCE #testCheckNotEmpty_Blank
        #void testCheckNotEmpty_Blank()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), '');
        #
        #    this.assertFalse(config.checkNotEmpty('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckNotEmpty_Empty
        #void testCheckNotEmpty_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></test>
        #        </root>
        #    ');
        #
        #    this.assertFalse(config.checkNotEmpty('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckNotEmpty_NotEmpty
        #void testCheckNotEmpty_NotEmpty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value</test>
        #        </root>
        #    ');
        #
        #    this.assertTrue(config.checkNotEmpty('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckNotEmpty_NotExists
        #void testCheckNotEmpty_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #        </root>
        #    ');
        #
        #    this.assertFalse(config.checkNotEmpty('test'));
        #}
      ENDSOURCE
      SOURCE #testCheckNotEmpty_Null
        #void testCheckNotEmpty_Null()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    // config-файл отсутствует
        #
        #    this.assertFalse(config.checkNotEmpty('test'));
        #}
      ENDSOURCE
      SOURCE #testConstruct_Document
        #void testConstruct_Document()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = SysConfigFile::construct(configName, tempPath, '', @'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <enabled>true</enabled>
        #        </config>
        #    ').clearGlobalCache();
        #
        #    this.assertFalse(config.checkFileExists());
        #    this.assertTrue(config.checkFileValid());
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #}
      ENDSOURCE
      SOURCE #testConstruct_SchemaAndDocument
        #void testConstruct_SchemaAndDocument()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = SysConfigFile::construct(configName,tempPath,@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:boolean" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ',
        #
        #    @'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <enabled>true</enabled>
        #        </config>
        #    ').clearGlobalCache();
        #
        #    this.assertFalse(config.checkFileExists());
        #    this.assertTrue(config.checkFileValid());
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #}
      ENDSOURCE
      SOURCE #testCreate
        #void testCreate()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName, tempPath, 'schemaText', 'fileText').clearGlobalCache();
        #    container       packedCon   = config.pack();
        #    SysConfigFile   config2     = SysConfigFile::create(packedCon);
        #
        #    this.assertEquals(configName, config2.name());
        #    this.assertEquals(tempPath, config2.directory());
        #    this.assertEquals(config.file(), config2.file());
        #    this.assertEquals(config.schema(), config2.schema());
        #}
      ENDSOURCE
      SOURCE #testCreate_containerInvalid
        #void testCreate_containerInvalid()
        #{
        #    container       packedCon   = connull();
        #    SysConfigFile   config      = SysConfigFile::create(packedCon);
        #
        #    this.assertNull(config);
        #}
      ENDSOURCE
      SOURCE #testDirectory
        #void testDirectory()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.assertEquals(tempPath, config.directory());
        #}
      ENDSOURCE
      SOURCE #testDirectory_Empty
        #void testDirectory_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName).clearGlobalCache();
        #;
        #    this.assertEquals(xInfo::directory(DirectoryType::Appl)+'Config\\', config.directory());
        #}
      ENDSOURCE
      SOURCE #testExample
        #//
        #// Test example from https://github.com/mazzy-ax/SysConfigFile/blob/master/README.md
        #//
        #void testExample()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <reportTemplateFolder>\\dax\template\</reportTemplateFolder>
        #
        #            <sender>Axapta</sender>
        #            <sender email="note">Notification server</sender>
        #            <sender email="mail">Company name</sender>
        #
        #            <AOS>
        #                <batch serverId="01@AOS" />
        #                <batch serverId="01@RESERV">true</batch>
        #            </AOS>
        #        </config>
        #    ');
        #
        #    this.assertEquals('PROD', config.get('id'));
        #    this.assertEquals('', config.get('notFound'));
        #
        #    this.assertTrue(config.getBoolean('AOS/batch'));
        #    this.assertFalse(config.getBoolean('notFound'));
        #
        #    this.assertEquals(['Axapta','Notification server','Company name'], config.getAll('sender'));
        #    this.assertEquals(['01@AOS','01@RESERV'], config.getAll('AOS/batch/@serverId'));
        #    this.assertEquals(connull(), config.getAll('notFound'));
        #
        #    this.assertEquals('Company name', config.getBy(['sender[@email="mail"]','sender[not(@email)]']));
        #    this.assertEquals('Axapta', config.getBy(['sender[@email="other"]','sender[not(@email)]']));
        #
        #    this.assertEquals('Microsoft Dynamics AX', SysConfigFile::value('name', configName, tempPath));
        #
        #    this.parmExceptionExpected(true, strfmt("Параметр notFound отсутствует в файле %1. Обратитесь к разработчикам.\r\n%2", config.filePath(), config.file()));
        #    this.assertEquals('', SysConfigFile::value('notFound', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testExample_ResourceXSD
        #void testExample_ResourceXSD()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToResource(config.schemaResourceName(),@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="reportTemplateFolder" type="xs:anyURI" />
        #                <xs:element name="sender" maxOccurs="unbounded">
        #                  <xs:complexType>
        #                    <xs:simpleContent>
        #                      <xs:extension base="xs:normalizedString">
        #                        <xs:attribute name="email" type="xs:normalizedString" use="optional" />
        #                      </xs:extension>
        #                    </xs:simpleContent>
        #                  </xs:complexType>
        #                </xs:element>
        #                <xs:element name="AOS">
        #                  <xs:complexType>
        #                    <xs:sequence>
        #                      <xs:element name="batch" maxOccurs="unbounded">
        #                        <xs:complexType>
        #                          <xs:simpleContent>
        #                            <xs:extension base="xs:normalizedString">
        #                              <xs:attribute name="serverId" type="xs:normalizedString" use="required" />
        #                            </xs:extension>
        #                          </xs:simpleContent>
        #                        </xs:complexType>
        #                      </xs:element>
        #                    </xs:sequence>
        #                  </xs:complexType>
        #                </xs:element>
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ');
        #
        #    this.writeToFile(config.filePath(), strfmt(@'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <reportTemplateFolder>\\dax\template\</reportTemplateFolder>
        #
        #            <sender>Axapta</sender>
        #            <sender email="note">Notification server</sender>
        #            <sender email="mail">Company name</sender>
        #
        #            <AOS>
        #                <batch serverId="01@AOS" />
        #                <batch serverId="01@RESERV">true</batch>
        #            </AOS>
        #        </config>
        #    ', configName));
        #
        #    this.assertTrue(config.checkFileValid(),'checkFileValid');
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #    this.assertEquals('', config.get('notFound'));
        #
        #    this.assertTrue(config.getBoolean('AOS/batch'));
        #    this.assertFalse(config.getBoolean('notFound'));
        #
        #    this.assertEquals(['Axapta','Notification server','Company name'], config.getAll('sender'));
        #    this.assertEquals(['01@AOS','01@RESERV'], config.getAll('AOS/batch/@serverId'));
        #    this.assertEquals(connull(), config.getAll('notFound'));
        #
        #    this.assertEquals('Company name', config.getBy(['sender[@email="mail"]','sender[not(@email)]']));
        #    this.assertEquals('Axapta', config.getBy(['sender[@email="other"]','sender[not(@email)]']));
        #
        #    this.assertEquals('Microsoft Dynamics AX', SysConfigFile::value('name', configName, tempPath));
        #
        #    this.parmExceptionExpected(true, strfmt("Параметр notFound отсутствует в файле %1. Обратитесь к разработчикам.\r\n%2", config.filePath(), config.file()));
        #    this.assertEquals('', SysConfigFile::value('notFound', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testFilePath
        #void testFilePath()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    // нет никаких config-файлов
        #
        #    this.assertEquals(strfmt(@'%1%2.config', tempPath, configName), config.filePath());
        #}
      ENDSOURCE
      SOURCE #testFilePath_2
        #void testFilePath_2()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(tempPath + configName + '.config');
        #    this.writeToFile(tempPath + configName + '.config.xml');
        #
        #    this.assertEquals(strfmt(@'%1%2.config', tempPath, configName), config.filePath());
        #}
      ENDSOURCE
      SOURCE #testFilePath_3
        #void testFilePath_3()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(tempPath + configName + '.config');
        #    this.writeToFile(tempPath + configName + '.config.xml');
        #    this.writeToFile(tempPath + configName + '.xml');
        #
        #    this.assertEquals(strfmt(@'%1%2.config', tempPath, configName), config.filePath());
        #}
      ENDSOURCE
      SOURCE #testFilePath_4
        #void testFilePath_4()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(tempPath + configName + '.config');
        #    this.writeToFile(tempPath + configName + '.config.xml');
        #    this.writeToFile(tempPath + configName + '.xml');
        #    this.writeToFile(tempPath + configName + '');
        #
        #    this.assertEquals(strfmt(@'%1%2.config', tempPath, configName), config.filePath());
        #}
      ENDSOURCE
      SOURCE #testFilePath_Config
        #void testFilePath_Config()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(tempPath + configName + '.config'); // просто создаем файл
        #
        #    this.assertEquals(strfmt(@'%1%2.config', tempPath, configName), config.filePath());
        #}
      ENDSOURCE
      SOURCE #testFilePath_ConfigXml
        #void testFilePath_ConfigXml()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(tempPath + configName + '.config.xml');
        #
        #    this.assertEquals(strfmt(@'%1%2.config.xml', tempPath, configName), config.filePath());
        #}
      ENDSOURCE
      SOURCE #testFilePath_EmptyExt
        #void testFilePath_EmptyExt()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(tempPath + configName + ''); // просто создаем файл
        #
        #    this.assertEquals(strfmt(@'%1%2', tempPath, configName), config.filePath());
        #}
      ENDSOURCE
      SOURCE #testFilePath_Xml
        #void testFilePath_Xml()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(tempPath + configName + '.xml'); // просто создаем файл
        #
        #    this.assertEquals(strfmt(@'%1%2.xml', tempPath, configName), config.filePath());
        #}
      ENDSOURCE
      SOURCE #testGet
        #void testGet()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>
        #            Value
        #          </test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('Value', config.get('test'));
        #    this.assertEquals('Value', config.get('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGet_Blank
        #void testGet_Blank()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), '');
        #
        #    this.assertEquals('Default', config.get('test', 'Default'));
        #    this.assertEquals('Default', config.get('test', 'Default'), 'from Cache');
        #
        #    this.assertEquals('', config.get('test'));
        #    this.assertEquals('', config.get('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGet_Empty
        #void testGet_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('', config.get('test'));
        #    this.assertEquals('', config.get('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGet_EmptyParamName
        #void testGet_EmptyParamName()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('', config.get());
        #    this.assertEquals('', config.get(), 'from Cache');
        #
        #    this.assertEquals('', config.get(''));
        #}
      ENDSOURCE
      SOURCE #testGet_FileBroken
        #void testGet_FileBroken()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></broken>
        #        </root>
        #    ');
        #
        #    this.parmExceptionExpected(true, "The 'test' start tag on line 3 does not match the end tag of 'broken'. Line 3, position 19.");
        #    this.assertEquals('', config.get('test'));
        #}
      ENDSOURCE
      SOURCE #testGet_NotExists
        #void testGet_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #        </root>
        #    ');
        #
        #    this.assertEquals('', config.get('test'));
        #    this.assertEquals('', config.get('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGet_Null
        #void testGet_Null()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.assertEquals('Default', config.get('test', 'Default'));
        #    this.assertEquals('Default', config.get('test', 'Default'), 'from Cache');
        #
        #    this.assertEquals('', config.get('test'));
        #    this.assertEquals('', config.get('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGet_xmlns
        #void testGet_xmlns()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root xmlns="https://github.com/mazzy-ax/SysConfigFile">
        #          <test>
        #            Value
        #          </test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('', config.get('test'));                  // not 'Value'!!!
        #    this.assertEquals('', config.get('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGet_xmlnsQualified
        #void testGet_xmlnsQualified()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <config:root xmlns:config="https://github.com/mazzy-ax/SysConfigFile">
        #          <config:test>
        #            Value
        #          </config:test>
        #        </config:root>
        #    ');
        #
        #    this.assertEquals('Value', config.get('config:test'));
        #    this.assertEquals('Value', config.get('config:test'), 'from Cache');
        #
        #    this.assertEquals('', config.get('test'));                  // not 'Value'!!!
        #    this.assertEquals('', config.get('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGetAll
        #void testGetAll()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value1</test>
        #          <test>Value2 </test>
        #          <test> Value3</test>
        #          <test>
        #              Value4
        #
        #          </test>
        #        </root>
        #    ');
        #
        #    this.assertEquals(['Value1','Value2','Value3','Value4'], config.getAll('test'));
        #    this.assertEquals(['Value1','Value2','Value3','Value4'], config.getAll('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGetAll_blank
        #void testGetAll_blank()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), '');
        #
        #    this.assertEquals(connull(), config.getAll('test'));
        #    this.assertEquals(connull(), config.getAll('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGetAll_Empty
        #void testGetAll_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></test>
        #          <test></test>
        #        </root>
        #    ');
        #
        #    this.assertEquals(['',''], config.getAll('test'));
        #    this.assertEquals(['',''], config.getAll('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGetAll_EmptyParamName
        #void testGetAll_EmptyParamName()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value1</test>
        #          <test>Value1</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals(connull(), config.getAll());
        #    this.assertEquals(connull(), config.getAll(), 'from Cache');
        #
        #    this.assertEquals(connull(), config.getAll(''));
        #}
      ENDSOURCE
      SOURCE #testGetAll_NotExists
        #void testGetAll_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #        </root>
        #    ');
        #
        #    this.assertEquals(connull(), config.getAll('test'));
        #    this.assertEquals(connull(), config.getAll('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGetAll_Null
        #void testGetAll_Null()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.assertEquals(connull(), config.getAll('test'));
        #    this.assertEquals(connull(), config.getAll('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGetAll_OneValue
        #void testGetAll_OneValue()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value1</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals(['Value1'], config.getAll('test'));
        #    this.assertEquals(['Value1'], config.getAll('test'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGetBoolean
        #void testGetBoolean()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    config.clearGlobalCache(); // очистим значения в глобальном кэше
        #
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <testTrue>True</testTrue>
        #          <testFalse>False</testFalse>
        #          <testtrue>true</testtrue>
        #          <testfalse>false</testfalse>
        #          <testTRUE>TRUE</testTRUE>
        #          <testFALSE>FALSE</testFALSE>
        #          <test1>1</test1>
        #          <test0>0</test0>
        #          <testOn>On</testOn>
        #          <testOff>Off</testOff>
        #          <testON>ON</testON>
        #          <testOFF>OFF</testOFF>
        #          <testEmpty />
        #          <testOther>Value</testOther>
        #        </root>
        #    ');
        #
        #    this.assertTrue (config.getBoolean('testTrue'),      'testTrue');
        #    this.assertFalse(config.getBoolean('testFalse'),     'testFalse');
        #    this.assertTrue (config.getBoolean('testtrue'),      'testtrue');
        #    this.assertFalse(config.getBoolean('testfalse'),     'testfalse');
        #    this.assertTrue (config.getBoolean('testTRUE'),      'testTRUE');
        #    this.assertFalse(config.getBoolean('testFALSE'),     'testFALSE');
        #    this.assertTrue (config.getBoolean('test1'),         'test1');
        #    this.assertFalse(config.getBoolean('test0'),         'test0');
        #    this.assertTrue (config.getBoolean('testOn'),        'testOn');
        #    this.assertFalse(config.getBoolean('testOff'),       'testOff');
        #    this.assertTrue (config.getBoolean('testON'),        'testON');
        #    this.assertFalse(config.getBoolean('testOFF'),       'testOFF');
        #    this.assertTrue (config.getBoolean('testEmpty'),     'testEmpty');
        #    this.assertFalse(config.getBoolean('testOther'),     'testOther');
        #    this.assertFalse(config.getBoolean('testNotExists'), 'testNotExists');
        #}
      ENDSOURCE
      SOURCE #testGetBy
        #void testGetBy()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    // вернет найденный элемент, соответствующий первому выражению.
        #    this.assertEquals('Value2', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'));
        #    this.assertEquals('Value2', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'), 'fromCache');
        #}
      ENDSOURCE
      SOURCE #testGetBy_Blank
        #void testGetBy_Blank()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'');
        #
        #    this.assertEquals('defaultValue', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'));
        #    this.assertEquals('defaultValue', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'), 'fromCache');
        #}
      ENDSOURCE
      SOURCE #testGetBy_ContainerEmpty
        #void testGetBy_ContainerEmpty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('defaultValue', config.getBy(connull(), 'defaultValue'));
        #    this.assertEquals('defaultValue', config.getBy(connull(), 'defaultValue'), 'fromCache?');
        #}
      ENDSOURCE
      SOURCE #testGetBy_ContainerNonString_Except
        #void testGetBy_ContainerNonString_Except()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    this.parmExceptionExpected(true);
        #
        #    // не найдет элемент, соответствующий первому выражению.
        #    // бросит исключение, когда станет обработывать второй не-строковый параметр
        #    this.assertEquals('Value2', config.getBy(['test[@attr="xy"]', 2, 'test[not(@attr)]'], 'defaultValue'));
        #}
      ENDSOURCE
      SOURCE #testGetBy_ContainerNonString_Ok
        #void testGetBy_ContainerNonString_Ok()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    // вернет найденный элемент, соответствующий первому выражению.
        #    // проигнорирует остальные выражения
        #    this.assertEquals('Value2', config.getBy(['test[@attr="bc"]', 2, 'test[not(@attr)]'], 'defaultValue'));
        #    this.assertEquals('Value2', config.getBy(['test[@attr="bc"]', 2, 'test[not(@attr)]'], 'defaultValue'), 'fromCache');
        #}
      ENDSOURCE
      SOURCE #testGetBy_FirstExists
        #void testGetBy_FirstExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('Value2', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'), 'order 1');
        #    this.assertEquals('Value2', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'), 'order 1, fromCache');
        #
        #    // порядок следования элементов не должен влиять на результат getBy
        #    config = new SysConfigFile(configName,tempPath);
        #    config.clearGlobalCache(); // очистим значения в глобальном кэше
        #
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value4</test>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('Value2', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'), 'order 2');
        #    this.assertEquals('Value2', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'), 'order 2, fromCache');
        #}
      ENDSOURCE
      SOURCE #testGetBy_FirstNotExists
        #void testGetBy_FirstNotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('Value4', config.getBy(['test[@attr="xy"]', 'test[not(@attr)]'], 'defaultValue'), 'order 1');
        #    this.assertEquals('Value4', config.getBy(['test[@attr="xy"]', 'test[not(@attr)]'], 'defaultValue'), 'order 1, fromCache');
        #
        #    // порядок следования элементов не должен влиять на результат getBy
        #    config = new SysConfigFile(configName,tempPath);
        #    config.clearGlobalCache(); // очистим значения в глобальном кэше
        #
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value4</test>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('Value4', config.getBy(['test[@attr="xy"]', 'test[not(@attr)]'], 'defaultValue'), 'order 2');
        #    this.assertEquals('Value4', config.getBy(['test[@attr="xy"]', 'test[not(@attr)]'], 'defaultValue'), 'order 2, fromCache');
        #}
      ENDSOURCE
      SOURCE #testGetBy_Null
        #void testGetBy_Null()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    // config-файл отсутствует
        #
        #    this.assertEquals('defaultValue', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'));
        #    this.assertEquals('defaultValue', config.getBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue'), 'fromCache');
        #}
      ENDSOURCE
      SOURCE #testGetBy_OmitParamWithoutPrev
        #void testGetBy_OmitParamWithoutPrev()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('', config.getBy());
        #}
      ENDSOURCE
      SOURCE #testGetBy_OmitParamWithPrev
        #void testGetBy_OmitParamWithPrev()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    // конструкция особого смысла не имеет.
        #    // но может возникнуть в сложном алгоритме обработки конфигов, когда проверки делаются в одном модуле, а получение - в другом
        #    this.assertEquals('Value2', config.ensureExists('test[@attr="bc"]').getBy());
        #}
      ENDSOURCE
      SOURCE #testGetBy_OneValue
        #void testGetBy_OneValue()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('Value4', config.getBy(['test[@attr="xy"]', 'test[not(@attr)]'], 'defaultValue'));
        #    this.assertEquals('Value4', config.getBy(['test[@attr="xy"]', 'test[not(@attr)]'], 'defaultValue'), 'fromCache');
        #}
      ENDSOURCE
      SOURCE #testGetBy_ValueEmpty
        #void testGetBy_ValueEmpty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab"></test>
        #          <test>someValue</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('', config.getBy(['test[@attr="ab"]', 'test[not(@attr)]'], 'defaultValue'));
        #    this.assertEquals('', config.getBy(['test[@attr="ab"]', 'test[not(@attr)]'], 'defaultValue'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testGetBy_ValueNotExists
        #void testGetBy_ValueNotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #        </root>
        #    ');
        #
        #    this.assertEquals('defaultValue', config.getBy(['test[@attr="ab"]', 'test[not(@attr)]'], 'defaultValue'));
        #    this.assertEquals('defaultValue', config.getBy(['test[@attr="ab"]', 'test[not(@attr)]'], 'defaultValue'), 'from Cache');
        #}
      ENDSOURCE
      SOURCE #testKnownTrouble
        #//
        #// Test example from https://github.com/mazzy-ax/SysConfigFile/blob/master/README.md
        #//
        #void testKnownTrouble()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <reportTemplateFolder>\\dax\template\</reportTemplateFolder>
        #
        #            <sender>Axapta</sender>
        #            <sender email="note">Notification server</sender>
        #            <sender email="mail">Company name</sender>
        #
        #            <AOS>
        #                <batch serverId="01@AOS" />
        #                <batch serverId="01@RESERV">true</batch>
        #            </AOS>
        #        </config>
        #    ');
        #
        #    this.assertFalse(config.checkExists('Name')); // нет такого, поскольку xml и XPath - регистрозависимы
        #
        #    this.assertTrue (config.checkExists('name')); // а такой вполне есть
        #    this.assertTrue (config.checkExists('Name')); // Опа! теперь и такой есть, поскольку найден в глобальном кэше
        #}
      ENDSOURCE
      SOURCE #testName
        #void testName()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = SysConfigFile::construct(configName).clearGlobalCache();
        #;
        #    this.assertEquals(configName, config.name());
        #}
      ENDSOURCE
      SOURCE #testName_Empty
        #void testName_Empty()
        #{
        #    SysConfigFile config = SysConfigFile::construct().clearGlobalCache();
        #;
        #    this.assertEquals('Axapta', config.name());
        #}
      ENDSOURCE
      SOURCE #testPackable
        #void testPackable()
        #{
        #    SysPackableTest test = SysPackableTest::newClassId(classnum(SysConfigFile));
        #    SysLastMinuteCheckStatus status = test.run();
        #
        #    if( status == SysLastMinuteCheckStatus::Skipped )
        #        return; // нет старой версии класса в old-слое - сравнить список параметров не с чем. Поэтому возвращаемся без проверки
        #
        #    this.assertEquals(SysLastMinuteCheckStatus::Passed, status);
        #}
      ENDSOURCE
      SOURCE #testToBoolean
        #void testToBoolean()
        #{
        #    this.assertTrue (SysConfigFile::toBoolean('True'),      'testTrue');
        #    this.assertFalse(SysConfigFile::toBoolean('False'),     'testFalse');
        #    this.assertTrue (SysConfigFile::toBoolean('true'),      'testtrue');
        #    this.assertFalse(SysConfigFile::toBoolean('false'),     'testfalse');
        #    this.assertTrue (SysConfigFile::toBoolean('TRUE'),      'testTRUE');
        #    this.assertFalse(SysConfigFile::toBoolean('FALSE'),     'testFALSE');
        #    this.assertTrue (SysConfigFile::toBoolean('1'),         'test1');
        #    this.assertFalse(SysConfigFile::toBoolean('0'),         'test0');
        #    this.assertTrue (SysConfigFile::toBoolean('On'),        'testOn');
        #    this.assertFalse(SysConfigFile::toBoolean('Off'),       'testOff');
        #    this.assertTrue (SysConfigFile::toBoolean('ON'),        'testON');
        #    this.assertFalse(SysConfigFile::toBoolean('OFF'),       'testOFF');
        #    this.assertTrue (SysConfigFile::toBoolean(''),          'testEmpty');   // не очевидно, но именно так. см. комментарий к методу toBoolean
        #    this.assertFalse(SysConfigFile::toBoolean('Other'),     'testOther');
        #}
      ENDSOURCE
      SOURCE #testValue
        #void testValue()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('Value', SysConfigFile::value('test', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testValue_Empty
        #void testValue_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('', SysConfigFile::value('test', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testValue_NotExists
        #void testValue_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.parmExceptionExpected(true);
        #
        #    SysConfigFile::value('test', configName, tempPath);
        #}
      ENDSOURCE
      SOURCE #testValueBoolean
        #void testValueBoolean()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>true</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals(true, SysConfigFile::valueBoolean('test', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testValueBoolean_Empty
        #void testValueBoolean_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></test>
        #          <testEmpty />
        #        </root>
        #    ');
        #
        #    this.assertEquals(true, SysConfigFile::valueBoolean('testEmpty', configName, tempPath));
        #    this.assertEquals(true, SysConfigFile::valueBoolean('test', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testValueBoolean_NotExists
        #void testValueBoolean_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #        </root>
        #    ');
        #
        #    this.assertEquals(false, SysConfigFile::valueBoolean('test', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testValueBy
        #void testValueBy()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test attr="ab">Value1</test>
        #          <test attr="bc">Value2</test>
        #          <test attr="cd">Value3</test>
        #          <test>Value4</test>
        #        </root>
        #    ');
        #
        #    // вернет найденный элемент, соответствующий первому выражению.
        #    // проигнорирует остальные выражения
        #    this.assertEquals('Value2', SysConfigFile::valueBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue', configName, tempPath));
        #    this.assertEquals('Value2', SysConfigFile::valueBy(['test[@attr="bc"]', 'test[not(@attr)]'], 'defaultValue', configName, tempPath), 'fromCache');
        #}
      ENDSOURCE
      SOURCE #testValueOrDefault
        #void testValueOrDefault()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test>Value</test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('Value', SysConfigFile::valueOrDefault('test', 'DefaultValue', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testValueOrDefault_Empty
        #void testValueOrDefault_Empty()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #          <test></test>
        #        </root>
        #    ');
        #
        #    this.assertEquals('', SysConfigFile::valueOrDefault('test', 'DefaultValue', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testValueOrDefault_NotExists
        #void testValueOrDefault_NotExists()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), @'<?xml version="1.0" encoding="utf-8"?>
        #        <root>
        #        </root>
        #    ');
        #
        #    this.assertEquals('DefaultValue', SysConfigFile::valueOrDefault('test', 'DefaultValue', configName, tempPath));
        #}
      ENDSOURCE
      SOURCE #testXSD
        #void testXSD()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.schemaPath(),@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:boolean" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ');
        #
        #    this.writeToFile(config.filePath(), strfmt(@'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <enabled>true</enabled>
        #        </config>
        #    ', configName));
        #
        #    this.assertTrue(config.checkFileValid(),'checkFileValid');
        #    this.assertTrue(config.checkSchemaValid(),'checkSchemaValid');
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #    config.ensureSchemaValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #    this.assertTrue(config.getBoolean('enabled'));
        #}
      ENDSOURCE
      SOURCE #testXSD_newParams
        #void testXSD_newParams()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath,@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:boolean" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ',
        #
        #    @'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <enabled>true</enabled>
        #        </config>
        #    ').clearGlobalCache();
        #
        #    this.assertFalse(config.checkFileExists());
        #    this.assertTrue(config.checkFileValid());
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #}
      ENDSOURCE
      SOURCE #testXSD_resource
        #void testXSD_resource()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToResource(config.schemaResourceName(),@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:boolean" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ');
        #
        #    this.writeToFile(config.filePath(), strfmt(@'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <enabled>true</enabled>
        #        </config>
        #    ', configName));
        #
        #
        #    this.assertTrue(config.checkFileValid(),'checkFileValid');
        #    this.assertTrue(config.checkSchemaValid(),'checkSchemaValid');
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #    config.ensureSchemaValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #    this.assertTrue(config.getBoolean('enabled'));
        #}
      ENDSOURCE
      SOURCE #testXSD_resourceInvalid
        #void testXSD_resourceInvalid()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToResource(config.schemaResourceName(),@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:XXX" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ');
        #
        #
        #    this.writeToFile(config.filePath(), strfmt(@'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <enabled>true</enabled>
        #        </config>
        #    ', configName));
        #
        #
        #    this.assertFalse(config.checkSchemaValid(),'checkSchemaValid');
        #    this.assertTrue(config.checkFileValid(),'checkFileValid');
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #    this.assertTrue(config.getBoolean('enabled'));
        #
        #    // при проверке
        #    this.parmExceptionExpected(
        #        true,
        #        strfmt("Line:8, Pos:18: Type 'http://www.w3.org/2001/XMLSchema:XXX' is not declared.\r\n%1\r\n%2",
        #                config.schemaPath(),
        #                config.schema())
        #    );
        #    config.ensureSchemaValid();
        #}
      ENDSOURCE
      SOURCE #testXSD_schemaInvalid
        #void testXSD_schemaInvalid()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.schemaPath(),@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:XXX" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ');
        #
        #
        #    this.writeToFile(config.filePath(), strfmt(@'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <enabled>true</enabled>
        #        </config>
        #    ', configName));
        #
        #
        #    this.assertFalse(config.checkSchemaValid(),'checkSchemaValid');
        #    this.assertTrue(config.checkFileValid(),'checkFileValid');
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #    this.assertTrue(config.getBoolean('enabled'));
        #
        #    // при проверке
        #    this.parmExceptionExpected(
        #        true,
        #        strfmt("Line:8, Pos:18: Type 'http://www.w3.org/2001/XMLSchema:XXX' is not declared.\r\n%1\r\n%2",
        #                config.schemaPath(),
        #                config.schema())
        #    );
        #    config.ensureSchemaValid();
        #}
      ENDSOURCE
      SOURCE #testXSD_schemaNull
        #void testXSD_schemaNull()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.filePath(), strfmt(@'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <enabled>true</enabled>
        #        </config>
        #    ', configName));
        #
        #    this.assertTrue(config.checkFileValid(),'checkFileValid');
        #    this.assertTrue(config.checkSchemaValid(),'checkSchemaValid');
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureFileValid();
        #    config.ensureSchemaValid();
        #
        #    this.assertEquals('PROD', config.get('id'));
        #    this.assertTrue(config.getBoolean('enabled'));
        #}
      ENDSOURCE
      SOURCE #testXSD_schemaValid_fileBroken
        #void testXSD_schemaValid_fileBroken()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.schemaPath(),@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:boolean" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ');
        #
        #    this.writeToFile(config.filePath(), strfmt(@'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</broken>
        #        </config>
        #    ', configName));
        #
        #
        #    this.parmExceptionExpected(true, "The 'id' start tag on line 3 does not match the end tag of 'broken'. Line 3, position 23.");
        #    this.assertFalse(config.checkFileValid(),'checkFileValid');
        #}
      ENDSOURCE
      SOURCE #testXSD_schemaValid_fileInvalid
        #void testXSD_schemaValid_fileInvalid()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.schemaPath(),@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:boolean" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ');
        #
        #
        #    this.writeToFile(config.filePath(), strfmt(@'<?xml version="1.0" encoding="utf-8"?>
        #        <config>
        #            <id>PROD</id>
        #            <name>Microsoft Dynamics AX</name>
        #            <invalidParam>\\dax\template\</invalidParam>
        #        </config>
        #    ', configName));
        #
        #
        #    this.assertFalse(config.checkFileValid(),'checkFileValid');
        #    this.assertTrue(config.checkSchemaValid(),'checkSchemaValid');
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureSchemaValid();
        #
        #    this.parmExceptionExpected(
        #        true,
        #        strfmt("Line:5, Pos:14: The element 'config' has invalid child element 'invalidParam'. List of possible elements expected: 'enabled'.\r\n%1\r\n%2",
        #                config.filePath(),
        #                config.file())
        #    );
        #    config.ensureFileValid();
        #}
      ENDSOURCE
      SOURCE #testXSD_schemaValid_fileNull
        #void testXSD_schemaValid_fileNull()
        #{
        #    str             configName  = funcname();
        #    SysConfigFile   config      = new SysConfigFile(configName,tempPath).clearGlobalCache();
        #;
        #    this.writeToFile(config.schemaPath(),@'<?xml version="1.0" encoding="utf-8"?>
        #        <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
        #          <xs:element name="config">
        #            <xs:complexType>
        #              <xs:sequence>
        #                <xs:element name="id" type="xs:normalizedString" />
        #                <xs:element name="name" type="xs:normalizedString" />
        #                <xs:element name="enabled" type="xs:boolean" />
        #              </xs:sequence>
        #            </xs:complexType>
        #          </xs:element>
        #        </xs:schema>
        #    ');
        #
        #    this.assertTrue(config.checkFileValid(),'checkFileValid');
        #    this.assertTrue(config.checkSchemaValid(),'checkSchemaValid');
        #
        #    this.parmExceptionExpected(false);
        #    config.ensureSchemaValid();
        #    config.ensureFileValid();
        #}
      ENDSOURCE
      SOURCE #writeToFile
        #protected void writeToFile(str filePath, str text = @'<?xml version="1.0" encoding="utf-8"?>')
        #{
        #    #File
        #    TextBuffer textBuffer = new TextBuffer();
        #;
        #    textBuffer.appendText(text);
        #
        #    new FileIOPermission(filePath, #io_write).assert();
        #
        #    textBuffer.toFile(filePath, FileEncoding::UTF8);
        #
        #    CodeAccessPermission::revertAssert();
        #}
      ENDSOURCE
      SOURCE #writeToResource
        #protected void writeToResource( SysElementName      resourceName,
        #                                str                 text,
        #                                str                 fileNameExt     = '.xsd',
        #                                SysResourceType     resourceType    = SysResourceType::Data)
        #{
        #    ResourceNode    resourceNode;
        #;
        #    if( strStartsWith(fileNameExt, '.') == false )
        #        throw error("При записи ресурса в тестовых методах имя файла должно начинаться с точки. Рабочие данные скорее всего с точки не начинаются.");
        #
        #    resourceNode = SysResource::getResourceNode(resourceName);
        #    if( resourceNode && resourceNode.filename() != fileNameExt )
        #    {
        #        throw error(strfmt("Имя файла (%1) не совпадает с resourceNode.filename(%2). Есть риск, что ресурс с именем %3 содержит рабочие данные. Тестирование прекращено, ресурс не изменен",
        #            fileNameExt,
        #            resourceNode.filename(),
        #            resourceName));
        #    }
        #
        #    if( SysConfigFileTest::writeToResource_Client([resourceName, text, fileNameExt, resourceType]) )
        #        resourceNameSet.add(resourceName);
        #}
      ENDSOURCE
      SOURCE #writeToResource_Client
        #// сохранять в AOT можно только из клиента.
        #private static client boolean writeToResource_Client(container params)
        #{
        #    SysElementName      resourceName;
        #    str                 text;
        #    str                 fileNameExt;
        #    SysResourceType     resourceType;
        #
        #    [resourceName, text, fileNameExt, resourceType] = params;
        #
        #    // При записи ресурса возможна неприятная ситуация со слоями: если, например, мы ведем тестирование в слое cus,
        #    // а какой-то редиска создал ресурс с этим именем в слое usr (например, запуская это же тестирование в слое usr)
        #    // то записать-то мы запишем. Но вот что прочитаем? Вопрос. Пока игнорируем возможные конфликты в слоях.
        #    // Дайте знать, если здесь нужно пожертвовать скоростью, но повысить надежность: https://github.com/mazzy-ax/SysConfigFile/issues
        #
        #    // Также не тестировалось при включенной системе контроля версий.
        #    // Дайте знать, если есть проблемы: https://github.com/mazzy-ax/SysConfigFile/issues
        #
        #    if( SysResource::saveResource(resourceName, fileNameExt, [text], resourceType) )
        #        return true;
        #
        #    return false;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics Project : SysConfigFile unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #SysConfigFile
   SHARED
  PROPERTIES
    Name                #SysConfigFile
  ENDPROPERTIES
  
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50015
      NODETYPE 329
      NAME #SysConfigFile
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50016
      NODETYPE 329
      NAME #SysConfigFileTest
    ENDNODE
  ENDPROJECT
  

***Element: END
