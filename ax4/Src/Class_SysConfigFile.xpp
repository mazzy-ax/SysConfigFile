//
// https://github.com/mazzy-ax/SysConfigFile
// (с) 2019 mazzy, v2.0, MIT License
//
// класс всегда выполняется на сервере!! см в AOT-параметры класса.
// класс и методы объявлены как final только ради производительности.
// класс использует аксаптовские xml-классы для работы с xml и xsd.
// класс реализует интерфейс SysPackable и содержит статический метод create по packed-контейнеру. см. также метод testPackable в классе SysConfigFile
//
// класс сознательно НЕ работает xml namespaces и неквалифицрованными названиями тегов и атрибутов.
// если потребность в namespase возникнет, то возможно потребуется рефакторить класс.
//
// класс создает неизменяемые (immutable) объекты - все значимые параметры определяются при создании объекта, хранятся в переменных объекта
// и не изменяются пока объект "живет".  см. https://en.wikipedia.org/wiki/Immutable_object
// некоторые внутренние переменные класса при необходимости вычисляют свое значение (lazyValue) и тоже не меняются после вычисления.
// в частности, класс читает содержимое config-файла и xsd-схемы один раз при первом обращении к файлу и схеме,
// а в дальнейшем переиспользует уже прочитанные файлы.
// соответственно значения параметров читаются из config-файла только один раз и хранятся в глобальном кэше.
// класс возвращает значение из кэша, если оно там есть. В противном случае читает значение из xml-файла.
//
// класс может выполнить валидацию config-файла по xsd-схеме. https://www.w3.org/XML/Schema
// чтобы выполнить валидацию, программист должен явно вызвать хотя бы один из методов: ensureFileValid, assertFileValid или checkFileValid.
// если методы не вызваны, то xml-классы выполняют только проверку "well formed xml" при чтении config-файла.
// xsd-схема может хранится централизовано в ресурсах AOT или в xsd-файле рядом с config-файлом,
// а может задаваться как параметр при создании класса.
//
// аксаптовские xml-классы не выполняет валидацию по DTD (выполняется только проверка синтаксиса DTD как подмножества синтаксиса xml)
// с некоторого времени Microsoft считает работу с DTD опасной (https://msdn.microsoft.com/en-us/magazine/ee335713.aspx)
// во-первых из-за "xml bomb" (гуглите). во-вторых, потому что способ проверки задает создатель внутри этого xml-файла.
// в далекие 2000е в этом не видели проблему, но уже в 2010е стали считать, что доверять создателю файла слишком наивно и опасно.
// технически, в аксаптовских xml-классах есть метод prohibitDtd. по умолчанию он возвращает true.
// у автора не получилось включить процессинг DTD в аксапте даже передав false в метод prohibitDtd.
// дайте знать, если у вас получится - https://github.com/mazzy-ax/SysConfigFile/issues
//
// класс использует System.String.Trim() поскольку аксаптовский global::strLRTrim() обрезает только пробелы,
// а нужно обрезать и пробелы, и табуляцию, и лишние переводы строк
//
// класс реализует паттерн check, ensure, assert:
// * check-методы возвращают boolean значение и не бросают исключений.
//   check-методы позволяют программисту проверить некое условие в своем коде. например, if(!config.checkFileValid()){...}
// * ensure-методы возвращают this объекта и бросают исключения при невыполнении некоего условия.
//   ensure-методы позволяют программисту записать цепочку проверок. например, config.checkFileValid().checkNotEmpty("param").get()
// * assert-методы являются статическими, ничего не возвращают и бросают исключения при невыполнении некоего условия
//
public final class SysConfigFile implements SysPackable
{
    #File
    #define.defaultConfigName('Axapta')

    // обязательный непустой key-параметр
    str             configName;         // имя конфига. используется как составная часть:
                                        // в имени ресурса и в имени файла, в которых хранится конфиг
                                        // а также как owner в globalCache()

    // опциональные параметры - вычисляются, если не заданы в конструкторе
    str             directory;          // каталог, в котором класс ищет config-файл. вместо пустой строки использует defaultDirectory() = %Appl%\Config
    str             file;               // исходный текст конфига
    boolean         fileLoaded;
    str             schema;             // исходный текст xsd-схемы
    boolean         schemaLoaded;

    // lazy - вычисляются один раз по мере необходимости. после вычисления не вычисляются заново и не изменяют свое значение
    // поэтому не используйте напрямую, а только через соответствующие методы класса
    str             owner;              // owner найденных в конфиге параметров, см. globalCache()
    SysElementName  schemaResourceName; // имя аксаптовского ресурса, см. schemaResourceName()
    Filename        filePath;           // полное имя config-файла с путем и расширением
    Filename        schemaPath;         // полное имя xsd-файла с путем и расширением

    XmlDocument     xmlDocument;
    XmlSchema       xmlSchema;

    boolean                     xmlDocumentValidated;
    XmlSchemaValidationError    xmlDocumentValidationError;

    // прочие
    str             lastUsedParamName;

    #define.CurrentVersion(1)
    #define.version1(1)
    #localmacro.CurrentList
        configName,
        directory,
        file,
        fileLoaded,
        schema,
        schemaLoaded
    #endmacro


    // принимает контейнер, содержащий полные имена файлов
    // перебирает имена и проверяет существует ли файл
    // возвращает первый существующий файл
    // если не существует ни одного файла, то возвращает первое имя
    protected Filename chooseExistOfFirstFile(container paths)
    {
        Filename path;
        int      len = conlen(paths);
        int      i;

        for( i=1; i<=len; i++ )
        {
            path = conpeek(paths, i);
            if( this.isFileExists(path) )
            {
                return path;
            }
        }

        path = conpeek(paths, 1);
        return path;
    }

    // возвращает true, файл существует
    protected final boolean isFileExists(Filename path)
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        if( System.IO.File::Exists(path) )
            return true;

        return false;
    }

    // возвращает true, если параметр присутствует в конфигурационном файле.
    public final boolean checkExists(str paramName)
    {
        container   cachedValues    = this.getAll(paramName);
        boolean     ret             = connull() != cachedValues;

        return ret;
    }

    // возвращает true, если config-файл существует
    public final boolean checkFileExists()
    {
        return this.isFileExists(this.filePath());
    }

    // возвращает true, если:
    // * config-файл и xsd-схема доступны и имеют непустое валидное xml-содержание
    // * config-файл пустой или не доступен (не доступный трактуется как пустой)
    // * config-файл содержит well formed xml, а xsd-схема или пуста, или не доступна
    // * config-файл и xsd-схема содержат well formed xml, но сама схема сама невалидна, см. checkSchemaValid()
    // возвращает false, в остальных случаях.
    public final boolean checkFileValid()
    {
        XmlReader   xmlReader;
    ;
        if( xmlDocumentValidated == false )
        {
            xmlDocumentValidationError = null;
            xmlDocumentValidated = true;

            if( this.xmlDocument() == null  )
                return true;

            if( !this.xmlSchema() )
                return true;

            if( !this.checkSchemaValid() )
                return true;

            // к сожалению, повторное чтение xml и схемы из строк:
            // xmlDocument и xmlSchema не используются в валидации аксаптовскими классами
            xmlReader = xmlReader::newXml(this.file());
            if( xmlReader )
                xmlDocumentValidationError = xmlReader.validate(this.schema());
        }

        return (xmlDocumentValidationError == null);
    }

    // возвращает true, если параметр присутствует в конфигурационном файле и его значение не пусто.
    public final boolean checkNotEmpty(str paramName)
    {
        str value = this.get(paramName);

        return (value != '');
    }

    // возвращает true, если:
    // * xsd-схема доступна, имеет well formed xml и не содержит ошибок компиляции см. xmlns:xs="http://www.w3.org/2001/XMLSchema", https://www.w3.org/XML/Schema
    // * xsd-схема недоступна или пуста (не доступная трактуется как пустая)
    // возвращает false, в остальных случаях.
    public final boolean checkSchemaValid()
    {
        if( this.xmlSchema() == null )
            return true;

        if( this.xmlSchema().validationError() )
            return false;

        return true;
    }

    // очищает из кэша значения всех прочитанных параметров данного конфига
    // создайте новый объект SysConfigFile для того, чтобы заново прочитать конфиг или схему
    public final SysConfigFile clearGlobalCache()
    {
        this.globalCache().clear(this.globalCacheOwner());

        return this;
    }

    // возвращает каталог, в котором SysConfigFile будет искать config-файлы
    // используется если при создании объекта каталог не был указан
    // внимание! класс серверный, поэтому пути вычисляются на сервере
    // по умолчанию возвращает %Appl%\Config\
    //
    // строка обязана иметь завершающий \
    private final str defaultDirectory()
    {
        str ret = xInfo::directory(DirectoryType::Appl)+'Config\\';

        return ret;
    }

    // возвращает серверный каталог, в котором SysConfigFile будет искать config-файлы
    // внимание! класс серверный, поэтому пути вычисляются на сервере
    public final str directory()
    {
        if( directory == '' )
            return this.defaultDirectory();

        return directory;
    }

    // возвращает ссылку на себя, если параметр присутствует в конфигурационном файле. Иначе бросает исключение.
    //
    // ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
    public final SysConfigFile ensureExists(str paramName)
    {
        if( this.checkExists(paramName) )
            return this;

        throw error(strfmt("Параметр %1 отсутствует в файле %2. Обратитесь к разработчикам.\r\n%3", paramName, this.filePath(), this.file()));
    }

    // возвращает ссылку на себя, config-файл существует. Иначе бросает исключение.
    //
    // ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
    public final SysConfigFile ensureFileExists()
    {
        if( this.checkFileExists() )
            return this;

        throw error(strfmt("Файл %1 не найден или нет доступа. Обратитесь к разработчикам", this.filePath()));
    }

    // возвращает ссылку на себя, если проверка на валидность config-файла прошла успешно. Иначе бросает исключение.
    //
    // ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
    public final SysConfigFile ensureFileValid()
    {
        if( this.checkFileValid() )
            return this;

        if( xmlDocumentValidationError == null )
            return this;

        throw error(strfmt("Line:%1, Pos:%2: %3\r\n%4\r\n%5",
                    xmlDocumentValidationError.lineNumber(),
                    xmlDocumentValidationError.linePosition(),
                    xmlDocumentValidationError.message(),
                    this.filePath(),
                    this.file()));
    }

    // возвращает ссылку на себя, если параметр присутствует в конфигурационном файле и его значение не пусто. Иначе бросает исключение.
    //
    // ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
    public final SysConfigFile ensureNotEmpty(str paramName)
    {
        if( this.checkNotEmpty(paramName) )
            return this;

        throw error(strfmt("Параметр %1 пустой или отсутствует в %2. Обратитесь к разработчикам.\r\n%3", paramName, this.filePath(), this.file()));
    }

    // возвращает ссылку на себя, если если проверка на валидность xsd-схемы прошла успешно. Иначе бросает исключение.
    //
    // ensure-методы можно добавлять перед get-методами, чтобы убедиться что условие выполнено
    public final SysConfigFile ensureSchemaValid()
    {
        XmlSchemaValidationError    schemaValidationError;
    ;
        if( this.checkSchemaValid() )
            return this;

        if( this.xmlSchema() )
            schemaValidationError = this.xmlSchema().validationError();

        if( schemaValidationError == null )
            return this;

        throw error(strfmt("Line:%1, Pos:%2: %3\r\n%4\r\n%5",
                    schemaValidationError.lineNumber(),
                    schemaValidationError.linePosition(),
                    schemaValidationError.message(),
                    this.schemaPath(),
                    this.schema()));
    }

    // возвращает исходный текст config-файла
    // возвращает пустую строку, если файл не удалось загрузить
    public final str file()
    {
        if( file )
            return file;

        if( fileLoaded )
            return file;

        fileLoaded = true;
        file = this.load(this.filePath());

        return file;
    }

    // возвращает полный путь к существующему config-файлу с расширениями .config, .config.xml, .xml и без расширения
    // если ни одного файла не существует, то возвращает путь с расширением .config
    //
    // можно модифицировать код, чтобы метод искал конфигурационный файл в разных директориях
    // и возвращал первый существующий config-файл
    //
    // внимание! класс серверный, поэтому пути вычисляются на сервере
    public FileName filePath()
    {
        Filename name;

        if( filePath == '' )
        {
            name = strfmt('%1%2', this.directory(), this.name());

            filePath = this.chooseExistOfFirstFile([
                    name+'.config',
                    name+'.config.xml',
                    name+'.xml',
                    name
            ]);
        }

        return filePath;
    }

    // возвращает первое найденное строковое значение параметра
    // возвращает пустую строку, если параметр отсутствует или класс не смог прочитать xml-файл
    // paramName - может быть выражением xPath
    // Если paramName пустой, то используется предыдущее значение paramName
    public final str get(str paramName = '', str defaultValue = '')
    {
        container values = this.getAll(paramName);
    ;
        if( values != connull() )
            return conpeek(values, 1);

        return defaultValue;
    }

    // возвращает контейнер найденных строковых значений параметра
    // возвращает connull, если параметр отсутствует или класс не смог прочитать xml-файл
    // paramName - может быть выражением xPath
    // Если paramName пустой, то используется предыдущее значение paramName
    //
    // возвращает контейнер а не составной объект, чтобы уменьшить накладные расходы на передачу объекта между клиентом и сервером
    public final container getAll(str _paramName = '')
    {
        str             paramName   = this.parmLastUsedParamName(_paramName);
        container       ret;
        XmlNodeList     nodeList;
        XmlNode         node;
        str             text;
    ;
        if( paramName == '' )
            return ret;

        if( this.file() == '' )
            return ret;

        // проверяем кэш, если текст был загружен из файла (предполагаем, что в файле постоянное содержимое)
        // иначе текст был установлен из конструктора и в нем может быть что угодно, поэтому не кэшируем
        if( fileLoaded )
            ret = this.globalCache().get(this.globalCacheOwner(), paramName, connull());

        if( ret )
            return ret;

        if( this.xmlRoot() )
            nodeList = this.xmlRoot().selectNodes(paramName);

        if( nodeList )
        {
            node = nodeList.nextNode();
            while( node )
            {
                ret += this.trim(node.text());
                node = nodeList.nextNode();
            }
        }

        // если текст был загружен из файла, то записываем в кэш
        if( fileLoaded )
            this.globalCache().set(this.globalCacheOwner(), paramName, ret);

        return ret;
    }

    // возвращает true, если параметр содержится в config-файле и имеет true-значение (см. комментарий внутри метода toBoolean)
    // возвращает defaultValue, если параметр не содержится в config-файле или имеет false-значение (см. комментарий внутри метода toBoolean)
    public final boolean getBoolean(str paramName = '', boolean defaultValue = false)
    {
        str value;

        if( !this.checkExists(paramName) )
            return defaultValue;

        value = this.get(paramName);

        return SysConfigFile::toBoolean(value, defaultValue);
    }

    // В Аксапте часто задаются настройки с приоритетом.
    // например, если нужно получить профиль разноски, то Аксапта:
    // сначала смотрит в профили разноски по товарам,
    // затем, если не найдено, то в профили разноски по группам,
    // затем, если не найдено, то в профили разноски по всем.
    // причем в Аксапте последовательность поиска не зависит от порядка элементов в таблице профилей.
    //
    // В xml-файлах, напротив, порядок элементов важен. Операторы xPath сохраняют порядок элементов из xml-файла.
    // Это значит, каким бы ни было выражение xPath, первым мы получим элемент, который в xml-файле расположен ближе к началу файла.
    // Конечно, вручную можно следить за порядком элементов в xml.
    // Но при генерации xml скриптами порядок элементов соблюдать уже затруднительно.
    //
    // Данный метод принимает несколько xPath-выражений и последовательно делает запрос для каждого выражения.
    // Данный метод возвращает первое найденное значение. Если ни одно выражение не нашло значений, то метод возвращает defaultValue
    //
    // Пример:
    // config.getBy(['profile[@group="mazzy"]', 'profile[not(@group)]'])
    //
    // См. также методы testGetBy в классе SysConfigFileTest
    //
    // Важно! paramNames - это контейнер строк.
    // Если внутри контейнера есть элемент-не-строка и метод добрался до проверки этого элемента, то метод бросит исключение.
    // Если внутри есть пустая строка, то она будет проинтерпретирована как "получить из кэша значение предыдущего выражения"
    // На практике полезной может быть только первая пустая строка. Но и в середине они допустимы, если контейнер создается каким-либо алгоритмом.
    public final str getBy(container paramNames = [''], str defaultValue = '')
    {
        int         len = conlen(paramNames);
        int         i;
        str         paramName;

        for(i=1; i<=len; i++)
        {
            paramName = conpeek(paramNames, i);     // здесь возможно исключение, если контейнер содержит не-строку
            if( this.checkExists(paramName) )       // результат каждого запроса кэшируется
                return this.get(paramName);
        }

        return defaultValue;
    }

    // однажды вычисленные значения из config-файла храним в appl.GlobalCache(). можно в infolog.GlobalCache() или classFactory.GlobalCache()
    private final SysGlobalCache globalCache()
    {
        if (!appl)                              // сюда попадаем, если кто-то запросил значения из appl.startup() при старте AOS,
            return SysGlobalCache::construct(); // когда еще не инициализированы глобальные переменные

        return appl.globalCache();
    }

    // значение owner для globalCache
    private final str globalCacheOwner()
    {
        // здесь хитрый момент:
        // в owner входит не полное имя файла с путем и расширением, а только configName (имя)
        // в результате ускоряется метод get, если значение уже есть в кэше (поскольку не нужно вычислять каталог)
        if (!owner)
            owner = strfmt("%1:%2", funcname(), this.name());

        return owner;
    }

    // загрузить текст из файла, который размещен по указанному пути
    // возвращает загруженный из файла текст
    // возвращает пустую строку, если файл не удалось загрузить
    private final str load(str path)
    {
        TextBuffer  textBuffer;
        str         fileText;

        if( !this.isFileExists(path) )
            return fileText;

        new FileIOPermission(path, 'r').assert();

        textBuffer = new TextBuffer();

        if( textBuffer.fromFile(path) )
            fileText = textBuffer.getText();

        return fileText;
    }

    public final str name()
    {
        return configName;
    }

    public final void new(str _configName = #defaultConfigName, str _directory = '', str _schema = '', str _xml = '')
    {
        if( _configName == '' )
            configName = #defaultConfigName;
        else
            configName = _configName;

        if( _directory && substr(_directory, strlen(_directory), 1) != '\\' )
            _directory = _directory + '\\';

        directory = _directory;
        schema = _schema;
        file = _xml;
    }

    public final container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

    // возвращает _paramName, если _paramName не пустой
    // возвращает последнее использованное наименование, если _paramName пустой
    // запоминает наименование в lastUsedParamName
    public final str parmLastUsedParamName(str _paramName = lastUsedParamName)
    {
        if( !prmisdefault(_paramName) )
        {
            _paramName = this.trim(_paramName);

            if( _paramName )
                lastUsedParamName = _paramName;
        }

        return lastUsedParamName;
    }

    // метод в первую очередь пытается загрузить текст схемы из AOT-ресурса с именем из schemaResourceName()
    // если AOT-ресурса с таким именем нет, то метод пытается загрузить схему из xsd-файла,
    // который размещен в том же каталоге, что config-файл
    //
    // возвращает текст xsd-схемы
    // возвращает пустую строку, если схему не удалось загрузить
    public final str schema()
    {
        ResourceNode    resourceNode;
        container       resourceData;
    ;
        if( schema )
            return schema;

        if( schemaLoaded )
            return schema;

        schemaLoaded = true;

        resourceNode = SysResource::getResourceNode(this.schemaResourceName());
        if( resourceNode )
        {
            resourceData = SysResource::getResourceNodeData(resourceNode);
            schema = conpeek(resourceData, 1);
            return schema;
        }

        schema = this.load(this.schemaPath());
        return schema;
    }

    // возвращает полный путь к файлу с xsd-схемой на сервере
    public final FileName schemaPath()
    {
        if( schemaPath == '' )
            schemaPath = strfmt('%1%2.xsd', this.directory(), this.name());

        return schemaPath;
    }

    // возвращает название ресурса (AOT\Resources), который содержит текст xsd-схемы
    public final str schemaResourceName()
    {
        if( schemaResourceName == '' )
            schemaResourceName = TreeNode::generateObjectName('Config_'+this.name());

        return schemaResourceName;
    }

    // преобразует объект в строку.
    // отладчик показывает эту строку как value объекта.
    public final str toString()
    {
        // читаем приватные переменные. ни в коем случае не обращаемся к методам ленивого доступа
        str ret = strfmt("{Name:%1, Dir:%2, File:%3, Schema:%4}", configName, directory, file, schema);

        return ret;
    }

    // обрезает не только пробелы, но и табуляцию с переводами строк и прочими white spaces юникода
    private final str trim(str s)
    {
        System.String ss;

        new InteropPermission(InteropKind::ClrInterop).assert();
        ss = System.String::Copy(s);
        s = ss.Trim();

        return s;
    }

    public final boolean unpack(container packedClass)
    {
        int version = runbase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                return true;
            default :
                return false;
        }

        return false;
    }

    // возвращает XML-документ
    // возвращает null, если документа не доступен или при чтении файла выявлены ошибки синтксического разбора xml-файла
    //
    // внимание! метод добавляет ошибки разбора xml-файла в инфолог, но исключение не бросает
    // предполагается, что программист получит значения при помощи get() или ensure().get()
    // и тем самым явно определит во внешнем коде обязательность того или иного параметра
    //
    // теоретически, конфигурационный файл может отсутствовать, может быть недоступным или содержать ошибки,
    // программист может задать разумное поведение и для этих случаев, не вводя try/catch
    private final XmlDocument xmlDocument()
    {
        XmlParseError parseError;
    ;
        if( xmlDocument != null )
            return xmlDocument;

        if( this.file() == '' )
            return null;

        xmlDocument = XmlDocument::newXml(this.file());
        if( !xmlDocument )
            return null;

        parseError = xmlDocument.parseError();
        if( parseError && parseError.errorCode() != 0 )
        {
            error(strfmt("@SYS97048", parseError.toString()));
            return null;
        }

        return xmlDocument;
    }

    private final XmlElement xmlRoot()
    {
        if( this.xmlDocument() == null )
            return null;

        return this.xmlDocument().root();
    }

    // возвращает объект с xsd-схемой
    // возвращает null, если схема не доступна
    // ошибки компиляции не приводят к ошибкам на данном этапе
    // чтобы провалидировать саму схему, программист должен явно вызвать checkSchemaValid, ensureSchemaValid, assertSchemaValid
    // также схема будет неявно провалидирована, если программист вызовет валидацию файла checkFileValid, ensureFileValid, assertFileValid
    private final XmlSchema xmlSchema()
    {
        if( xmlSchema )
            return xmlSchema;

        if( this.schema() == '' )
            return null;

        xmlSchema = XMLSchema::newXml(this.schema());

        if( xmlSchema )
            xmlSchema.compile();    // схема может содержать ошибки компиляции. проверяется в методе валидации

        return xmlSchema;
    }

    // возвращает контейнер найденных строковых значений параметра
    // или connull, если параметр отсутствует или класс не смог прочитать xml-файл
    // paramName - может быть выражением xPath
    // Если paramName пустой, то используется предыдущее значение paramName
    //
    // используйте этот метод только для чтения одного параметра из config-файла
    // как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static container allValues(str paramName, str configName = #defaultConfigName, str directory = '')
    {
        container ret = SysConfigFile::construct(configName, directory).getAll(paramName);

        return ret;
    }

    // используйте этот метод только для проверки одного параметра из config-файла
    // как только нужно прочитать несколько параметров или проверить несколько условий,
    // создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static SysConfigFile assertExists(str paramName, str configName = #defaultConfigName, str directory = '')
    {
        return SysConfigFile::construct(configName, directory).ensureExists(paramName);
    }

    // используйте этот метод только для проверки одного условия
    // как только нужно прочитать несколько параметров или проверить несколько условий,
    // создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static SysConfigFile assertFileExists(str configName = #defaultConfigName, str directory = '')
    {
        return SysConfigFile::construct(configName, directory).ensureFileExists();
    }

    // используйте этот метод только для проверки одного условия
    // как только нужно прочитать несколько параметров или проверить несколько условий,
    // создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static SysConfigFile assertFileValid(str configName = #defaultConfigName, str directory = '')
    {
        return SysConfigFile::construct(configName, directory).ensureFileValid();
    }

    // используйте этот метод только для проверки одного параметра из config-файла
    // как только нужно прочитать несколько параметров или проверить несколько условий,
    // создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static SysConfigFile assertNotEmpty(str paramName, str configName = #defaultConfigName, str directory = '')
    {
        return SysConfigFile::construct(configName, directory).ensureNotEmpty(paramName);
    }

    // используйте этот метод только для проверки одного условия
    // как только нужно прочитать несколько параметров или проверить несколько условий,
    // создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static SysConfigFile assertSchemaValid(str configName = #defaultConfigName, str directory = '')
    {
        return SysConfigFile::construct(configName, directory).ensureSchemaValid();
    }

    server public static SysConfigFile construct(str configName = #defaultConfigName, str directory = '', str schema = '', str xml = '')
    {
        SysConfigFile ret = new SysConfigFile(configName, directory, schema, xml);

        return ret;
    }

    // Создает объект из контейнера, который в свою очередь был создан методом SysConfigFile.pack()
    // возвращает созданный объект, если распаковка из контейнера прошла успешно
    // возвращает null в противном случае
    server public static SysConfigFile create(container con)
    {
        SysConfigFile sysConfigFile = new SysConfigFile();
    ;
        if( sysConfigFile.unpack(con) == false )
            return null;

        return sysConfigFile;
    }

    // используйте этот метод только для проверки одного параметра из config-файла
    // как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static boolean exists(str paramName, str configName = #defaultConfigName, str directory = '')
    {
        boolean ret = SysConfigFile::construct(configName, directory).checkExists(paramName);

        return ret;
    }

    // возвращает false, если параметр не содержится в config-файле (или имеет false-значение. см. комментарий внутри)
    // возвращает true, если параметр содержится в config-файле и имеет true-значение (см. комментарий внутри)
    // возвращает defaultValue, если параметр содержится в config-файле и содержит прочий текст
    public static boolean toBoolean(str value, boolean defaultValue = false)
    {
        // спорный момент: нужно ли трактовать пустое значение в существующем xml-элементе как true или как false?
        // в мире XML элементы с пустым значением принято оформлять одним элементом с замыкающей косой чертой: <emptyValue />
        // такие элементы трактуются как разрешение чего-нибудь, включение чего-нибудь или как наличие чего-нибудь.
        // но в мире XML нет способа отличить разные формы записи элементов: <emptyValue /> и <emptyValue></emptyValue> - эквивалентны
        // поэтому можно либо оба варианта трактовать как true, либо оба варианта как false.
        // Предлагается трактовать как true. см. также "C.2. Empty Elements" https://www.w3.org/TR/xhtml1/#guidelines
        //
        if( value == '' )   // Закомментируйте эти две строки
            return true;    // если хотите трактовать пустое значение как false

        if( value == '1' )
            return true;

        value = strupr(value);
        if( value == 'TRUE' || value == 'ON' )
            return true;

        // спорный момент: можно ли трактовать остальные значения как false? или обязательно требовать определенного текста?
        //if( value == '0' || value == 'FALSE' || value == 'OFF' )
        //    return false;

        return defaultValue;
    }

    // возвращает первое найденное строковое значение параметра
    // бросает исключение, если параметр отсутствует в config-файле или класс не смог прочитать xml-файл
    // paramName - может быть выражением xPath. Если paramName пустой, то используется предыдущее значение paramName
    //
    // используйте этот метод только чтения одного параметра из config-файла
    // как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static str value(str paramName, str configName = #defaultConfigName, str directory = '')
    {
        str ret = SysConfigFile::construct(configName, directory).ensureExists(paramName).get();

        return ret;
    }

    // возвращает true или false. см. комментарий в методе getBoolean
    //
    // используйте этот метод только чтения одного параметра из config-файла
    // как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static boolean valueBoolean(str paramName, str configName = #defaultConfigName, str directory = '')
    {
        boolean ret = SysConfigFile::construct(configName, directory).getBoolean(paramName);

        return ret;
    }

    // Данный метод принимает несколько xPath-выражений и последовательно делает запрос для каждого выражения.
    // Данный метод возвращает первое найденное значение. Если ни одно выражение не нашло значений, то метод возвращает defaultValue
    // см. комментарий к методу getBy()
    //
    // используйте этот метод только чтения одного параметра из config-файла
    // как только нужно прочитать или проверить несколько параметров, создайте один раз переменную SysConfigFile и вызывайте методы инстанса
    public static str valueBy(container paramNames, str defaultValue = '', str configName = #defaultConfigName, str directory = '')
    {
        str ret = SysConfigFile::construct(configName, directory).getBy(paramNames, defaultValue);

        return ret;
    }


    // возвращает первое найденное строковое значение параметра
    // возвращает defaultValue, если параметр отсутствует в config-файле или класс не смог прочитать xml-файл
    // paramName - может быть выражением xPath. Если paramName пустой, то используется предыдущее значение paramName
    //
    // используйте этот метод только чтения одного параметра из config-файла
    public static str valueOrDefault(str paramName, str defaultValue = '', str configName = #defaultConfigName, str directory = '')
    {
        str ret = SysConfigFile::construct(configName, directory).get(paramName, defaultValue);

        return ret;
    }
}